{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ProfileToMetrics Connector","text":"<ul> <li> <p> CPU Metrics</p> <p>Convert CPU profiling data into OpenTelemetry metrics for performance monitoring</p> <p> CPU Metrics</p> </li> <li> <p> Memory Metrics</p> <p>Transform memory allocation profiles into actionable metrics</p> <p> Memory Metrics</p> </li> <li> <p> Advanced Filtering</p> <p>Filter by process, thread, and pattern matching for precise metric generation</p> <p> Filtering</p> </li> <li> <p> Easy Deployment</p> <p>Deploy with Docker or Kubernetes using provided manifests</p> <p> Deployment</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>The ProfileToMetrics Connector is an OpenTelemetry Collector connector that converts profiling data into metrics. It's designed to be generic and configurable, allowing users to define the types of attributes to attach to metrics and extract data from the profiling string table using literal values or regular expressions.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd04 Generic Profile Processing: Convert any profiling data format into OpenTelemetry metrics</li> <li>\u26a1 CPU &amp; Memory Metrics: Generate CPU time and memory allocation metrics</li> <li>\ud83c\udfaf Flexible Filtering: Filter by process, thread, and pattern matching</li> <li>\ud83c\udff7\ufe0f Attribute Extraction: Extract attributes from string table using regex or literals</li> <li>\ud83d\udc33 Docker Ready: Pre-built Docker images with multi-platform support</li> <li>\u2638\ufe0f Kubernetes Native: Complete K8s deployment manifests</li> <li>\ud83d\udd0d Debug Logging: Comprehensive debug logging for troubleshooting</li> <li>\ud83e\uddea Test Coverage: Unit and integration tests included</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph TB\n    A[Profiling Data] --&gt; B[ProfileToMetrics Connector]\n    B --&gt; C[CPU Metrics]\n    B --&gt; D[Memory Metrics]\n    C --&gt; E[OpenTelemetry Metrics]\n    D --&gt; E\n    E --&gt; F[OTLP Exporter]\n    E --&gt; G[Debug Exporter]\n    F --&gt; H[Observability Platform]\n    G --&gt; I[Console Output]</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-using-docker","title":"1. Using Docker","text":"<pre><code># Pull the image\ndocker pull hrexed/otel-collector-profilemetrics:latest\n\n# Run with configuration\ndocker run -p 4317:4317 -p 8888:8888 \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:latest\n</code></pre>"},{"location":"#2-using-kubernetes","title":"2. Using Kubernetes","text":"<pre><code># Apply the manifests\nkubectl apply -f k8s/namespace.yaml\nkubectl apply -f k8s/rbac.yaml\nkubectl apply -f k8s/configmap.yaml\nkubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n</code></pre>"},{"location":"#3-configuration-example","title":"3. Configuration Example","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\nexporters:\n  debug:\n    verbosity: detailed\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug, otlp]\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started - Overview, installation, and quick start</li> <li>Configuration - Detailed configuration options</li> <li>Deployment - Docker and Kubernetes deployment</li> <li>Testing - Testing strategies and examples</li> <li>Development - Architecture and contributing guide</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Documentation: This site</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache License 2.0 - see the LICENSE file for details.</p>"},{"location":"api/connector-api/","title":"Connector API Reference","text":"<p>This document provides a comprehensive API reference for the ProfileToMetrics Connector.</p>"},{"location":"api/connector-api/#connector-interface","title":"Connector Interface","text":""},{"location":"api/connector-api/#factory","title":"Factory","text":"<pre><code>type Factory struct {\n    component.MustNewType\n}\n\nfunc (f *Factory) CreateDefaultConfig() component.Config\nfunc (f *Factory) CreateConnector(\n    ctx context.Context,\n    params connector.CreateSettings,\n    cfg component.Config,\n    nextConsumer consumer.Metrics,\n) (connector.Connector, error)\n</code></pre>"},{"location":"api/connector-api/#connector-implementation","title":"Connector Implementation","text":"<pre><code>type profileToMetricsConnector struct {\n    config       *Config\n    nextConsumer consumer.Metrics\n    logger       *zap.Logger\n    converter    *profiletometrics.ConverterConnector\n}\n</code></pre>"},{"location":"api/connector-api/#methods","title":"Methods","text":""},{"location":"api/connector-api/#start","title":"Start","text":"<pre><code>func (c *profileToMetricsConnector) Start(\n    ctx context.Context,\n    host component.Host,\n) error\n</code></pre> <p>Description: Initializes the connector and starts processing.</p> <p>Parameters: - <code>ctx</code>: Context for cancellation and timeout - <code>host</code>: OpenTelemetry Collector host interface</p> <p>Returns: - <code>error</code>: Any initialization error</p> <p>Example: <pre><code>err := connector.Start(ctx, host)\nif err != nil {\n    log.Fatal(\"Failed to start connector:\", err)\n}\n</code></pre></p>"},{"location":"api/connector-api/#shutdown","title":"Shutdown","text":"<pre><code>func (c *profileToMetricsConnector) Shutdown(\n    ctx context.Context,\n) error\n</code></pre> <p>Description: Gracefully shuts down the connector.</p> <p>Parameters: - <code>ctx</code>: Context for cancellation and timeout</p> <p>Returns: - <code>error</code>: Any shutdown error</p> <p>Example: <pre><code>err := connector.Shutdown(ctx)\nif err != nil {\n    log.Printf(\"Error during shutdown: %v\", err)\n}\n</code></pre></p>"},{"location":"api/connector-api/#capabilities","title":"Capabilities","text":"<pre><code>func (c *profileToMetricsConnector) Capabilities() consumer.Capabilities\n</code></pre> <p>Description: Returns the capabilities of the connector.</p> <p>Returns: - <code>consumer.Capabilities</code>: Connector capabilities</p> <p>Example: <pre><code>caps := connector.Capabilities()\nfmt.Printf(\"Mutates data: %v\\n\", caps.MutatesData)\n</code></pre></p>"},{"location":"api/connector-api/#consumetraces","title":"ConsumeTraces","text":"<pre><code>func (c *profileToMetricsConnector) ConsumeTraces(\n    ctx context.Context,\n    td ptrace.Traces,\n) error\n</code></pre> <p>Description: Processes trace data and converts it to metrics.</p> <p>Parameters: - <code>ctx</code>: Context for cancellation and timeout - <code>td</code>: Trace data to process</p> <p>Returns: - <code>error</code>: Any processing error</p> <p>Example: <pre><code>err := connector.ConsumeTraces(ctx, traceData)\nif err != nil {\n    log.Printf(\"Failed to process traces: %v\", err)\n}\n</code></pre></p>"},{"location":"api/connector-api/#consumelogs","title":"ConsumeLogs","text":"<pre><code>func (c *profileToMetricsConnector) ConsumeLogs(\n    ctx context.Context,\n    ld plog.Logs,\n) error\n</code></pre> <p>Description: Processes log data and converts it to metrics.</p> <p>Parameters: - <code>ctx</code>: Context for cancellation and timeout - <code>ld</code>: Log data to process</p> <p>Returns: - <code>error</code>: Any processing error</p> <p>Example: <pre><code>err := connector.ConsumeLogs(ctx, logData)\nif err != nil {\n    log.Printf(\"Failed to process logs: %v\", err)\n}\n</code></pre></p>"},{"location":"api/connector-api/#consumemetrics","title":"ConsumeMetrics","text":"<pre><code>func (c *profileToMetricsConnector) ConsumeMetrics(\n    ctx context.Context,\n    md pmetric.Metrics,\n) error\n</code></pre> <p>Description: Processes metric data (pass-through).</p> <p>Parameters: - <code>ctx</code>: Context for cancellation and timeout - <code>md</code>: Metric data to process</p> <p>Returns: - <code>error</code>: Any processing error</p> <p>Example: <pre><code>err := connector.ConsumeMetrics(ctx, metricData)\nif err != nil {\n    log.Printf(\"Failed to process metrics: %v\", err)\n}\n</code></pre></p>"},{"location":"api/connector-api/#configuration-api","title":"Configuration API","text":""},{"location":"api/connector-api/#config-structure","title":"Config Structure","text":"<pre><code>type Config struct {\n    Metrics       MetricsConfig       `mapstructure:\"metrics\"`\n    Attributes    []AttributeConfig   `mapstructure:\"attributes\"`\n    ProcessFilter ProcessFilterConfig `mapstructure:\"process_filter\"`\n    ThreadFilter  ThreadFilterConfig  `mapstructure:\"thread_filter\"`\n    PatternFilter PatternFilterConfig  `mapstructure:\"pattern_filter\"`\n}\n</code></pre>"},{"location":"api/connector-api/#metricsconfig","title":"MetricsConfig","text":"<pre><code>type MetricsConfig struct {\n    CPU    CPUMetricsConfig    `mapstructure:\"cpu\"`\n    Memory MemoryMetricsConfig `mapstructure:\"memory\"`\n}\n</code></pre>"},{"location":"api/connector-api/#cpumetricsconfig","title":"CPUMetricsConfig","text":"<pre><code>type CPUMetricsConfig struct {\n    Enabled     bool   `mapstructure:\"enabled\"`\n    MetricName  string `mapstructure:\"metric_name\"`\n    Description string `mapstructure:\"description\"`\n    Unit        string `mapstructure:\"unit\"`\n}\n</code></pre>"},{"location":"api/connector-api/#memorymetricsconfig","title":"MemoryMetricsConfig","text":"<pre><code>type MemoryMetricsConfig struct {\n    Enabled     bool   `mapstructure:\"enabled\"`\n    MetricName  string `mapstructure:\"metric_name\"`\n    Description string `mapstructure:\"description\"`\n    Unit        string `mapstructure:\"unit\"`\n}\n</code></pre>"},{"location":"api/connector-api/#attributeconfig","title":"AttributeConfig","text":"<pre><code>type AttributeConfig struct {\n    Key   string `mapstructure:\"key\"`\n    Value string `mapstructure:\"value\"`\n}\n</code></pre>"},{"location":"api/connector-api/#filterconfig","title":"FilterConfig","text":"<pre><code>type ProcessFilterConfig struct {\n    Enabled bool   `mapstructure:\"enabled\"`\n    Pattern string `mapstructure:\"pattern\"`\n}\n\ntype ThreadFilterConfig struct {\n    Enabled bool   `mapstructure:\"enabled\"`\n    Pattern string `mapstructure:\"pattern\"`\n}\n\ntype PatternFilterConfig struct {\n    Enabled bool   `mapstructure:\"enabled\"`\n    Pattern string `mapstructure:\"pattern\"`\n}\n</code></pre>"},{"location":"api/connector-api/#converter-api","title":"Converter API","text":""},{"location":"api/connector-api/#converterconnector","title":"ConverterConnector","text":"<pre><code>type ConverterConnector struct {\n    config ConverterConfig\n    logger *zap.Logger\n}\n</code></pre>"},{"location":"api/connector-api/#newconverterconnector","title":"NewConverterConnector","text":"<pre><code>func NewConverterConnector(config ConverterConfig) *ConverterConnector\n</code></pre> <p>Description: Creates a new converter connector instance.</p> <p>Parameters: - <code>config</code>: Converter configuration</p> <p>Returns: - <code>*ConverterConnector</code>: New converter instance</p> <p>Example: <pre><code>config := ConverterConfig{\n    Metrics: MetricsConfig{\n        CPU: CPUMetricsConfig{Enabled: true},\n        Memory: MemoryMetricsConfig{Enabled: true},\n    },\n}\nconverter := NewConverterConnector(config)\n</code></pre></p>"},{"location":"api/connector-api/#converttracestometrics","title":"ConvertTracesToMetrics","text":"<pre><code>func (c *ConverterConnector) ConvertTracesToMetrics(\n    traces ptrace.Traces,\n) (pmetric.Metrics, error)\n</code></pre> <p>Description: Converts trace data to metrics.</p> <p>Parameters: - <code>traces</code>: Trace data to convert</p> <p>Returns: - <code>pmetric.Metrics</code>: Generated metrics - <code>error</code>: Any conversion error</p> <p>Example: <pre><code>metrics, err := converter.ConvertTracesToMetrics(traces)\nif err != nil {\n    log.Printf(\"Conversion failed: %v\", err)\n    return\n}\n</code></pre></p>"},{"location":"api/connector-api/#convertlogstometrics","title":"ConvertLogsToMetrics","text":"<pre><code>func (c *ConverterConnector) ConvertLogsToMetrics(\n    logs plog.Logs,\n) (pmetric.Metrics, error)\n</code></pre> <p>Description: Converts log data to metrics.</p> <p>Parameters: - <code>logs</code>: Log data to convert</p> <p>Returns: - <code>pmetric.Metrics</code>: Generated metrics - <code>error</code>: Any conversion error</p> <p>Example: <pre><code>metrics, err := converter.ConvertLogsToMetrics(logs)\nif err != nil {\n    log.Printf(\"Conversion failed: %v\", err)\n    return\n}\n</code></pre></p>"},{"location":"api/connector-api/#convertprofilestometrics","title":"ConvertProfilesToMetrics","text":"<pre><code>func (c *ConverterConnector) ConvertProfilesToMetrics(\n    ctx context.Context,\n    profiles pprofile.Profiles,\n) (pmetric.Metrics, error)\n</code></pre> <p>Description: Converts profiling data to metrics.</p> <p>Parameters: - <code>ctx</code>: Context for cancellation and timeout - <code>profiles</code>: Profiling data to convert</p> <p>Returns: - <code>pmetric.Metrics</code>: Generated metrics - <code>error</code>: Any conversion error</p> <p>Example: <pre><code>metrics, err := converter.ConvertProfilesToMetrics(ctx, profiles)\nif err != nil {\n    log.Printf(\"Conversion failed: %v\", err)\n    return\n}\n</code></pre></p>"},{"location":"api/connector-api/#utility-functions","title":"Utility Functions","text":""},{"location":"api/connector-api/#calculatecputime","title":"CalculateCPUTime","text":"<pre><code>func CalculateCPUTime(samples []pprofile.Sample) float64\n</code></pre> <p>Description: Calculates total CPU time from samples.</p> <p>Parameters: - <code>samples</code>: Profiling samples</p> <p>Returns: - <code>float64</code>: Total CPU time in seconds</p> <p>Example: <pre><code>cpuTime := CalculateCPUTime(samples)\nfmt.Printf(\"CPU time: %.3f seconds\\n\", cpuTime)\n</code></pre></p>"},{"location":"api/connector-api/#calculatememoryallocation","title":"CalculateMemoryAllocation","text":"<pre><code>func CalculateMemoryAllocation(samples []pprofile.Sample) float64\n</code></pre> <p>Description: Calculates total memory allocation from samples.</p> <p>Parameters: - <code>samples</code>: Profiling samples</p> <p>Returns: - <code>float64</code>: Total memory allocation in bytes</p> <p>Example: <pre><code>memoryAllocation := CalculateMemoryAllocation(samples)\nfmt.Printf(\"Memory allocation: %.0f bytes\\n\", memoryAllocation)\n</code></pre></p>"},{"location":"api/connector-api/#extractfromstringtable","title":"ExtractFromStringTable","text":"<pre><code>func ExtractFromStringTable(\n    profile pprofile.Profile,\n    attributes map[string]string,\n) map[string]string\n</code></pre> <p>Description: Extracts attributes from profiling string table.</p> <p>Parameters: - <code>profile</code>: Profiling data - <code>attributes</code>: Existing attributes map</p> <p>Returns: - <code>map[string]string</code>: Updated attributes map</p> <p>Example: <pre><code>attributes := make(map[string]string)\nattributes = ExtractFromStringTable(profile, attributes)\nfmt.Printf(\"Extracted attributes: %v\\n\", attributes)\n</code></pre></p>"},{"location":"api/connector-api/#error-handling","title":"Error Handling","text":""},{"location":"api/connector-api/#error-types","title":"Error Types","text":"<pre><code>type ConversionError struct {\n    Type    string\n    Message string\n    Cause   error\n}\n\nfunc (e *ConversionError) Error() string\nfunc (e *ConversionError) Unwrap() error\n</code></pre>"},{"location":"api/connector-api/#common-errors","title":"Common Errors","text":"<pre><code>var (\n    ErrInvalidConfiguration = &amp;ConversionError{\n        Type:    \"ConfigurationError\",\n        Message: \"invalid configuration\",\n    }\n\n    ErrInvalidProfilingData = &amp;ConversionError{\n        Type:    \"DataError\",\n        Message: \"invalid profiling data\",\n    }\n\n    ErrMetricGeneration = &amp;ConversionError{\n        Type:    \"MetricError\",\n        Message: \"failed to generate metrics\",\n    }\n)\n</code></pre>"},{"location":"api/connector-api/#error-handling-example","title":"Error Handling Example","text":"<pre><code>metrics, err := converter.ConvertProfilesToMetrics(ctx, profiles)\nif err != nil {\n    var convErr *ConversionError\n    if errors.As(err, &amp;convErr) {\n        switch convErr.Type {\n        case \"ConfigurationError\":\n            log.Printf(\"Configuration error: %v\", convErr.Message)\n        case \"DataError\":\n            log.Printf(\"Data error: %v\", convErr.Message)\n        case \"MetricError\":\n            log.Printf(\"Metric generation error: %v\", convErr.Message)\n        default:\n            log.Printf(\"Unknown error: %v\", convErr.Message)\n        }\n    } else {\n        log.Printf(\"Unexpected error: %v\", err)\n    }\n    return\n}\n</code></pre>"},{"location":"api/connector-api/#logging","title":"Logging","text":""},{"location":"api/connector-api/#log-levels","title":"Log Levels","text":"<ul> <li><code>DEBUG</code>: Detailed debugging information</li> <li><code>INFO</code>: General information</li> <li><code>WARN</code>: Warning messages</li> <li><code>ERROR</code>: Error messages</li> </ul>"},{"location":"api/connector-api/#log-fields","title":"Log Fields","text":"<pre><code>c.logger.Debug(\"Processing traces\",\n    zap.Int(\"resource_spans_count\", resourceSpansCount),\n    zap.Int(\"total_spans\", totalSpans),\n)\n\nc.logger.Error(\"Failed to convert traces to metrics\",\n    zap.Error(err),\n    zap.Int(\"input_spans\", totalSpans),\n)\n</code></pre>"},{"location":"api/connector-api/#log-configuration","title":"Log Configuration","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n</code></pre>"},{"location":"api/connector-api/#performance","title":"Performance","text":""},{"location":"api/connector-api/#metrics","title":"Metrics","text":"<ul> <li>Throughput: Number of profiles processed per second</li> <li>Latency: Time to process a single profile</li> <li>Memory Usage: Memory consumption during processing</li> <li>CPU Usage: CPU consumption during processing</li> </ul>"},{"location":"api/connector-api/#optimization","title":"Optimization","text":"<ul> <li>Batch Processing: Process multiple profiles in batches</li> <li>Caching: Cache frequently accessed data</li> <li>Parallel Processing: Use goroutines for concurrent processing</li> <li>Memory Pooling: Reuse memory allocations</li> </ul>"},{"location":"api/connector-api/#monitoring","title":"Monitoring","text":"<pre><code>// Performance metrics\nc.logger.Info(\"Performance metrics\",\n    zap.Duration(\"processing_time\", processingTime),\n    zap.Int(\"profiles_processed\", profilesProcessed),\n    zap.Float64(\"throughput\", throughput),\n)\n</code></pre>"},{"location":"api/connector-api/#testing","title":"Testing","text":""},{"location":"api/connector-api/#unit-tests","title":"Unit Tests","text":"<pre><code>func TestConvertProfilesToMetrics(t *testing.T) {\n    // Test implementation\n}\n</code></pre>"},{"location":"api/connector-api/#integration-tests","title":"Integration Tests","text":"<pre><code>func TestIntegration(t *testing.T) {\n    // Integration test implementation\n}\n</code></pre>"},{"location":"api/connector-api/#benchmark-tests","title":"Benchmark Tests","text":"<pre><code>func BenchmarkConvertProfilesToMetrics(b *testing.B) {\n    // Benchmark implementation\n}\n</code></pre>"},{"location":"api/connector-api/#examples","title":"Examples","text":""},{"location":"api/connector-api/#basic-usage","title":"Basic Usage","text":"<pre><code>// Create configuration\nconfig := Config{\n    Metrics: MetricsConfig{\n        CPU: CPUMetricsConfig{\n            Enabled: true,\n            MetricName: \"cpu_time\",\n        },\n        Memory: MemoryMetricsConfig{\n            Enabled: true,\n            MetricName: \"memory_allocation\",\n        },\n    },\n}\n\n// Create converter\nconverter := NewConverterConnector(ConverterConfig{\n    Metrics: config.Metrics,\n})\n\n// Convert profiles\nmetrics, err := converter.ConvertProfilesToMetrics(ctx, profiles)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Use metrics\nfmt.Printf(\"Generated %d metrics\\n\", metrics.ResourceMetrics().Len())\n</code></pre>"},{"location":"api/connector-api/#advanced-usage","title":"Advanced Usage","text":"<pre><code>// Advanced configuration\nconfig := Config{\n    Metrics: MetricsConfig{\n        CPU: CPUMetricsConfig{\n            Enabled: true,\n            MetricName: \"application_cpu_time\",\n            Description: \"Application CPU time\",\n            Unit: \"s\",\n        },\n        Memory: MemoryMetricsConfig{\n            Enabled: true,\n            MetricName: \"application_memory_allocation\",\n            Description: \"Application memory allocation\",\n            Unit: \"bytes\",\n        },\n    },\n    Attributes: []AttributeConfig{\n        {Key: \"service.name\", Value: \"my-service\"},\n        {Key: \"environment\", Value: \"production\"},\n    },\n    ProcessFilter: ProcessFilterConfig{\n        Enabled: true,\n        Pattern: \"my-app.*\",\n    },\n    ThreadFilter: ThreadFilterConfig{\n        Enabled: true,\n        Pattern: \"worker-.*\",\n    },\n}\n\n// Create converter with advanced configuration\nconverter := NewConverterConnector(ConverterConfig{\n    Metrics: config.Metrics,\n    Attributes: config.Attributes,\n    ProcessFilter: config.ProcessFilter,\n    ThreadFilter: config.ThreadFilter,\n})\n\n// Convert with error handling\nmetrics, err := converter.ConvertProfilesToMetrics(ctx, profiles)\nif err != nil {\n    log.Printf(\"Conversion failed: %v\", err)\n    return\n}\n\n// Process metrics\nresourceMetrics := metrics.ResourceMetrics()\nfor i := 0; i &lt; resourceMetrics.Len(); i++ {\n    resourceMetric := resourceMetrics.At(i)\n    scopeMetrics := resourceMetric.ScopeMetrics()\n\n    for j := 0; j &lt; scopeMetrics.Len(); j++ {\n        scopeMetric := scopeMetrics.At(j)\n        metrics := scopeMetric.Metrics()\n\n        for k := 0; k &lt; metrics.Len(); k++ {\n            metric := metrics.At(k)\n            fmt.Printf(\"Metric: %s\\n\", metric.Name())\n        }\n    }\n}\n</code></pre>"},{"location":"configuration/collector-config/","title":"Collector Configuration","text":"<p>This guide covers configuring the OpenTelemetry Collector with the ProfileToMetrics connector.</p>"},{"location":"configuration/collector-config/#basic-collector-setup","title":"Basic Collector Setup","text":""},{"location":"configuration/collector-config/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n      memory:\n        enabled: true\n\nexporters:\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\n</code></pre>"},{"location":"configuration/collector-config/#receivers","title":"Receivers","text":""},{"location":"configuration/collector-config/#otlp-receiver","title":"OTLP Receiver","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n        max_recv_msg_size: 4194304\n        max_concurrent_streams: 16\n      http:\n        endpoint: 0.0.0.0:4318\n        max_request_body_size: 4194304\n</code></pre>"},{"location":"configuration/collector-config/#prometheus-receiver","title":"Prometheus Receiver","text":"<pre><code>receivers:\n  prometheus:\n    config:\n      scrape_configs:\n        - job_name: 'otel-collector'\n          scrape_interval: 10s\n          static_configs:\n            - targets: ['localhost:8888']\n</code></pre>"},{"location":"configuration/collector-config/#connectors","title":"Connectors","text":""},{"location":"configuration/collector-config/#profiletometrics-connector","title":"ProfileToMetrics Connector","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n</code></pre>"},{"location":"configuration/collector-config/#processors","title":"Processors","text":""},{"location":"configuration/collector-config/#batch-processor","title":"Batch Processor","text":"<pre><code>processors:\n  batch:\n    timeout: 1s\n    send_batch_size: 1024\n    send_batch_max_size: 2048\n</code></pre>"},{"location":"configuration/collector-config/#resource-processor","title":"Resource Processor","text":"<pre><code>processors:\n  resource:\n    attributes:\n      - key: \"deployment.environment\"\n        value: \"production\"\n        action: \"upsert\"\n      - key: \"service.name\"\n        from_attribute: \"service.name\"\n        action: \"upsert\"\n</code></pre>"},{"location":"configuration/collector-config/#filter-processor","title":"Filter Processor","text":"<pre><code>processors:\n  filter:\n    traces:\n      span:\n        - 'attributes[\"http.method\"] == \"GET\"'\n    metrics:\n      metric:\n        - 'name == \"cpu_time\"'\n</code></pre>"},{"location":"configuration/collector-config/#transform-processor","title":"Transform Processor","text":"<pre><code>processors:\n  transform:\n    trace_statements:\n      - context: \"span\"\n        statements:\n          - set(attributes[\"processed\"], true)\n    metric_statements:\n      - context: \"metric\"\n        statements:\n          - set(attributes[\"source\"], \"profiletometrics\")\n</code></pre>"},{"location":"configuration/collector-config/#exporters","title":"Exporters","text":""},{"location":"configuration/collector-config/#debug-exporter","title":"Debug Exporter","text":"<pre><code>exporters:\n  debug:\n    verbosity: detailed\n    sampling_initial: 2\n    sampling_thereafter: 500\n</code></pre>"},{"location":"configuration/collector-config/#otlp-exporter","title":"OTLP Exporter","text":"<pre><code>exporters:\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n    tls:\n      insecure: true\n    compression: gzip\n    timeout: 30s\n    retry_on_failure:\n      enabled: true\n      initial_interval: 5s\n      max_interval: 30s\n      max_elapsed_time: 300s\n</code></pre>"},{"location":"configuration/collector-config/#prometheus-exporter","title":"Prometheus Exporter","text":"<pre><code>exporters:\n  prometheus:\n    endpoint: \"0.0.0.0:8889\"\n    namespace: \"otel\"\n    const_labels:\n      service: \"profiletometrics\"\n</code></pre>"},{"location":"configuration/collector-config/#service-configuration","title":"Service Configuration","text":""},{"location":"configuration/collector-config/#pipelines","title":"Pipelines","text":"<pre><code>service:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch, resource, filter]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      processors: [batch, resource, transform]\n      exporters: [debug, otlp, prometheus]\n    logs:\n      receivers: [otlp]\n      processors: [batch, resource]\n      exporters: [debug, otlp]\n</code></pre>"},{"location":"configuration/collector-config/#telemetry","title":"Telemetry","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n    metrics:\n      level: detailed\n      address: 0.0.0.0:8888\n    traces:\n      level: detailed\n      address: 0.0.0.0:8888\n</code></pre>"},{"location":"configuration/collector-config/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\nprocessors:\n  batch:\n    timeout: 1s\n    send_batch_size: 1024\n  resource:\n    attributes:\n      - key: \"deployment.environment\"\n        value: \"production\"\n        action: \"upsert\"\n  filter:\n    metrics:\n      metric:\n        - 'name == \"cpu_time\"'\n        - 'name == \"memory_allocation\"'\n\nexporters:\n  debug:\n    verbosity: detailed\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n    tls:\n      insecure: true\n  prometheus:\n    endpoint: \"0.0.0.0:8889\"\n    namespace: \"otel\"\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch, resource]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      processors: [batch, resource, filter]\n      exporters: [debug, otlp, prometheus]\n\n  telemetry:\n    logs:\n      level: debug\n      development: true\n    metrics:\n      level: detailed\n      address: 0.0.0.0:8888\n</code></pre>"},{"location":"configuration/collector-config/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"configuration/collector-config/#development","title":"Development","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n\nexporters:\n  debug:\n    verbosity: detailed\n</code></pre>"},{"location":"configuration/collector-config/#production","title":"Production","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: info\n      development: false\n\nexporters:\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n    tls:\n      insecure: false\n    compression: gzip\n</code></pre>"},{"location":"configuration/collector-config/#kubernetes","title":"Kubernetes","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    attributes:\n      - key: \"k8s.namespace\"\n        value: \"default\"\n      - key: \"k8s.pod.name\"\n        value: \"pod-.*\"\n      - key: \"k8s.container.name\"\n        value: \"container-.*\"\n\nprocessors:\n  k8sattributes:\n    auth_type: \"serviceAccount\"\n    passthrough: false\n    filter:\n      node_from_env_var: \"KUBE_NODE_NAME\"\n</code></pre>"},{"location":"configuration/collector-config/#configuration-validation","title":"Configuration Validation","text":""},{"location":"configuration/collector-config/#command-line-validation","title":"Command Line Validation","text":"<pre><code># Validate configuration\notelcol --config config.yaml --dry-run\n\n# Check configuration syntax\notelcol --config config.yaml --check-config\n</code></pre>"},{"location":"configuration/collector-config/#common-validation-errors","title":"Common Validation Errors","text":""},{"location":"configuration/collector-config/#1-invalid-pipeline-configuration","title":"1. Invalid Pipeline Configuration","text":"<pre><code># \u274c Invalid - missing receivers\nservice:\n  pipelines:\n    metrics:\n      exporters: [debug]\n\n# \u2705 Valid - includes receivers\nservice:\n  pipelines:\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\n</code></pre>"},{"location":"configuration/collector-config/#2-invalid-connector-usage","title":"2. Invalid Connector Usage","text":"<pre><code># \u274c Invalid - connector in wrong pipeline\nservice:\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n\n# \u2705 Valid - connector in traces pipeline\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\n</code></pre>"},{"location":"configuration/collector-config/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/collector-config/#debug-configuration","title":"Debug Configuration","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n    metrics:\n      level: detailed\n      address: 0.0.0.0:8888\n</code></pre>"},{"location":"configuration/collector-config/#health-checks","title":"Health Checks","text":"<pre><code># Check collector health\ncurl http://localhost:8888/\n\n# Check metrics\ncurl http://localhost:8888/metrics\n\n# Check configuration\ncurl http://localhost:8888/config\n</code></pre>"},{"location":"configuration/collector-config/#log-analysis","title":"Log Analysis","text":"<pre><code># Check logs for errors\ndocker logs &lt;container-id&gt; | grep ERROR\n\n# Check debug logs\ndocker logs &lt;container-id&gt; | grep DEBUG\n\n# Check connector logs\ndocker logs &lt;container-id&gt; | grep profiletometrics\n</code></pre>"},{"location":"configuration/connector-config/","title":"Connector Configuration","text":"<p>The ProfileToMetrics connector supports comprehensive configuration options for metrics generation, attribute extraction, and filtering.</p>"},{"location":"configuration/connector-config/#basic-configuration","title":"Basic Configuration","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n</code></pre>"},{"location":"configuration/connector-config/#configuration-reference","title":"Configuration Reference","text":""},{"location":"configuration/connector-config/#metrics-configuration","title":"Metrics Configuration","text":""},{"location":"configuration/connector-config/#cpu-metrics","title":"CPU Metrics","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true                    # Enable CPU metrics\n        metric_name: \"cpu_time\"         # Metric name\n        description: \"CPU time in seconds\" # Metric description\n        unit: \"s\"                       # Metric unit\n</code></pre>"},{"location":"configuration/connector-config/#memory-metrics","title":"Memory Metrics","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      memory:\n        enabled: true                   # Enable memory metrics\n        metric_name: \"memory_allocation\" # Metric name\n        description: \"Memory allocation in bytes\" # Metric description\n        unit: \"bytes\"                   # Metric unit\n</code></pre>"},{"location":"configuration/connector-config/#attribute-configuration","title":"Attribute Configuration","text":"<p>Extract attributes from the profiling data's string table.</p>"},{"location":"configuration/connector-config/#literal-values","title":"Literal Values","text":"<pre><code>connectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"            # Literal value\n      - key: \"environment\"\n        value: \"production\"\n</code></pre>"},{"location":"configuration/connector-config/#regular-expressions","title":"Regular Expressions","text":"<pre><code>connectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"service-.*\"           # Regex pattern\n      - key: \"version\"\n        value: \"v[0-9]+\\\\.[0-9]+\"      # Version pattern\n</code></pre>"},{"location":"configuration/connector-config/#filtering-configuration","title":"Filtering Configuration","text":""},{"location":"configuration/connector-config/#process-filtering","title":"Process Filtering","text":"<p>Filter metrics based on process names:</p> <pre><code>connectors:\n  profiletometrics:\n    process_filter:\n      enabled: true                     # Enable process filtering\n      pattern: \"my-app.*\"              # Regex pattern for process names\n</code></pre>"},{"location":"configuration/connector-config/#thread-filtering","title":"Thread Filtering","text":"<p>Filter metrics based on thread names:</p> <pre><code>connectors:\n  profiletometrics:\n    thread_filter:\n      enabled: true                    # Enable thread filtering\n      pattern: \"worker-.*\"            # Regex pattern for thread names\n</code></pre>"},{"location":"configuration/connector-config/#pattern-filtering","title":"Pattern Filtering","text":"<p>Filter metrics based on attribute patterns:</p> <pre><code>connectors:\n  profiletometrics:\n    pattern_filter:\n      enabled: true                    # Enable pattern filtering\n      pattern: \"service-.*\"           # Regex pattern for attributes\n</code></pre>"},{"location":"configuration/connector-config/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nconnectors:\n  profiletometrics:\n    # Metrics configuration\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n        description: \"CPU time in seconds\"\n        unit: \"s\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n        description: \"Memory allocation in bytes\"\n        unit: \"bytes\"\n\n    # Attribute extraction\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n      - key: \"environment\"\n        value: \"production\"\n      - key: \"version\"\n        value: \"v[0-9]+\\\\.[0-9]+\"\n      - key: \"instance.id\"\n        value: \"instance-.*\"\n\n    # Filtering\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\n    thread_filter:\n      enabled: true\n      pattern: \"worker-.*\"\n\n    pattern_filter:\n      enabled: true\n      pattern: \"service-.*\"\n\nexporters:\n  debug:\n    verbosity: detailed\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug, otlp]\n\n  telemetry:\n    logs:\n      level: debug\n      development: true\n</code></pre>"},{"location":"configuration/connector-config/#configuration-validation","title":"Configuration Validation","text":""},{"location":"configuration/connector-config/#required-fields","title":"Required Fields","text":"<ul> <li><code>metrics.cpu.enabled</code> or <code>metrics.memory.enabled</code> must be <code>true</code></li> <li>At least one attribute must be configured</li> <li>Valid regex patterns for filters</li> </ul>"},{"location":"configuration/connector-config/#optional-fields","title":"Optional Fields","text":"<ul> <li><code>metrics.cpu.metric_name</code> (default: \"cpu_time\")</li> <li><code>metrics.memory.metric_name</code> (default: \"memory_allocation\")</li> <li>All filtering options are optional</li> </ul>"},{"location":"configuration/connector-config/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/connector-config/#multiple-attribute-rules","title":"Multiple Attribute Rules","text":"<pre><code>connectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n      - key: \"service.version\"\n        value: \"v[0-9]+\\\\.[0-9]+\"\n      - key: \"deployment.environment\"\n        value: \"production\"\n      - key: \"k8s.pod.name\"\n        value: \"pod-.*\"\n</code></pre>"},{"location":"configuration/connector-config/#complex-filtering","title":"Complex Filtering","text":"<pre><code>connectors:\n  profiletometrics:\n    process_filter:\n      enabled: true\n      pattern: \"(my-app|worker|scheduler).*\"\n\n    thread_filter:\n      enabled: true\n      pattern: \"(main|worker|background)-.*\"\n\n    pattern_filter:\n      enabled: true\n      pattern: \"(service|deployment|k8s)-.*\"\n</code></pre>"},{"location":"configuration/connector-config/#debug-configuration","title":"Debug Configuration","text":"<pre><code>connectors:\n  profiletometrics:\n    # ... other configuration ...\n\n    # Enable debug logging\n    debug:\n      enabled: true\n      log_level: \"debug\"\n      log_samples: true\n      log_attributes: true\n</code></pre>"},{"location":"configuration/connector-config/#configuration-examples","title":"Configuration Examples","text":""},{"location":"configuration/connector-config/#simple-setup","title":"Simple Setup","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n      memory:\n        enabled: true\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n</code></pre>"},{"location":"configuration/connector-config/#production-setup","title":"Production Setup","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"application_cpu_time\"\n        description: \"Application CPU time\"\n        unit: \"s\"\n      memory:\n        enabled: true\n        metric_name: \"application_memory_allocation\"\n        description: \"Application memory allocation\"\n        unit: \"bytes\"\n\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n      - key: \"service.version\"\n        value: \"v[0-9]+\\\\.[0-9]+\"\n      - key: \"deployment.environment\"\n        value: \"production\"\n      - key: \"k8s.namespace\"\n        value: \"default\"\n      - key: \"k8s.pod.name\"\n        value: \"pod-.*\"\n\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\n    thread_filter:\n      enabled: true\n      pattern: \"worker-.*\"\n</code></pre>"},{"location":"configuration/connector-config/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"configuration/connector-config/#common-issues","title":"Common Issues","text":""},{"location":"configuration/connector-config/#1-invalid-regex-patterns","title":"1. Invalid Regex Patterns","text":"<pre><code># \u274c Invalid - unescaped dots\npattern: \"service.*\"\n\n# \u2705 Valid - escaped dots\npattern: \"service\\\\..*\"\n</code></pre>"},{"location":"configuration/connector-config/#2-missing-required-fields","title":"2. Missing Required Fields","text":"<pre><code># \u274c Invalid - no metrics enabled\nconnectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n\n# \u2705 Valid - at least one metric enabled\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n</code></pre>"},{"location":"configuration/connector-config/#3-configuration-validation","title":"3. Configuration Validation","text":"<pre><code># Validate configuration\notelcol --config config.yaml --dry-run\n</code></pre>"},{"location":"configuration/connector-config/#debug-configuration_1","title":"Debug Configuration","text":"<p>Enable debug logging to troubleshoot configuration issues:</p> <pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n</code></pre>"},{"location":"deployment/docker/","title":"Docker Deployment","text":"<p>Deploy the ProfileToMetrics Connector using Docker containers.</p>"},{"location":"deployment/docker/#quick-start","title":"Quick Start","text":""},{"location":"deployment/docker/#pull-and-run","title":"Pull and Run","text":"<pre><code># Pull the latest image\ndocker pull hrexed/otel-collector-profilemetrics:latest\n\n# Run with basic configuration\ndocker run -p 4317:4317 -p 8888:8888 \\\n  hrexed/otel-collector-profilemetrics:latest\n</code></pre>"},{"location":"deployment/docker/#with-configuration-file","title":"With Configuration File","text":"<pre><code># Create configuration file\ncat &gt; config.yaml &lt;&lt; EOF\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n      memory:\n        enabled: true\n\nexporters:\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\nEOF\n\n# Run with configuration\ndocker run -p 4317:4317 -p 8888:8888 \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:latest\n</code></pre>"},{"location":"deployment/docker/#image-variants","title":"Image Variants","text":""},{"location":"deployment/docker/#latest-recommended","title":"Latest (Recommended)","text":"<pre><code>docker pull hrexed/otel-collector-profilemetrics:latest\n</code></pre>"},{"location":"deployment/docker/#specific-version","title":"Specific Version","text":"<pre><code>docker pull hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"deployment/docker/#multi-platform","title":"Multi-Platform","text":"<pre><code># AMD64\ndocker pull hrexed/otel-collector-profilemetrics:latest-amd64\n\n# ARM64\ndocker pull hrexed/otel-collector-profilemetrics:latest-arm64\n</code></pre>"},{"location":"deployment/docker/#configuration","title":"Configuration","text":""},{"location":"deployment/docker/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>OTEL_CONFIG</code> <code>/etc/otelcol/config.yaml</code> Path to configuration file <code>OTEL_LOG_LEVEL</code> <code>info</code> Log level (debug, info, warn, error) <code>OTEL_LOG_FORMAT</code> <code>json</code> Log format (json, console)"},{"location":"deployment/docker/#volume-mounts","title":"Volume Mounts","text":"<pre><code># Configuration file\n-v $(pwd)/config.yaml:/etc/otelcol/config.yaml\n\n# Logs directory\n-v $(pwd)/logs:/var/log/otelcol\n\n# Data directory\n-v $(pwd)/data:/var/lib/otelcol\n</code></pre>"},{"location":"deployment/docker/#port-mapping","title":"Port Mapping","text":"Container Port Host Port Description 4317 4317 OTLP gRPC receiver 4318 4318 OTLP HTTP receiver 8888 8888 Health check and metrics 8889 8889 Prometheus metrics (if enabled)"},{"location":"deployment/docker/#docker-compose","title":"Docker Compose","text":""},{"location":"deployment/docker/#basic-setup","title":"Basic Setup","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    environment:\n      - OTEL_LOG_LEVEL=debug\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#with-observability-platform","title":"With Observability Platform","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    environment:\n      - OTEL_LOG_LEVEL=info\n    depends_on:\n      - jaeger\n      - prometheus\n    restart: unless-stopped\n\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    ports:\n      - \"16686:16686\"\n    environment:\n      - COLLECTOR_OTLP_ENABLED=true\n    restart: unless-stopped\n\n  prometheus:\n    image: prom/prometheus:latest\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#production-deployment","title":"Production Deployment","text":""},{"location":"deployment/docker/#resource-limits","title":"Resource Limits","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    environment:\n      - OTEL_LOG_LEVEL=info\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 4G\n        reservations:\n          cpus: '1.0'\n          memory: 2G\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#health-checks","title":"Health Checks","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8888/\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#logging-configuration","title":"Logging Configuration","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    environment:\n      - OTEL_LOG_LEVEL=info\n      - OTEL_LOG_FORMAT=json\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#building-custom-images","title":"Building Custom Images","text":""},{"location":"deployment/docker/#build-from-source","title":"Build from Source","text":"<pre><code># Clone repository\ngit clone https://github.com/henrikrexed/profiletoMetrics.git\ncd profiletoMetrics\n\n# Build Docker image\nmake docker-build\n\n# Build with specific version\nmake docker-build VERSION=0.1.0\n</code></pre>"},{"location":"deployment/docker/#custom-dockerfile","title":"Custom Dockerfile","text":"<pre><code>FROM hrexed/otel-collector-profilemetrics:latest\n\n# Add custom configuration\nCOPY custom-config.yaml /etc/otelcol/config.yaml\n\n# Add custom processors\nCOPY custom-processors/ /etc/otelcol/processors/\n\n# Set environment variables\nENV OTEL_LOG_LEVEL=debug\nENV OTEL_LOG_FORMAT=console\n</code></pre>"},{"location":"deployment/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker/#common-issues","title":"Common Issues","text":""},{"location":"deployment/docker/#1-port-already-in-use","title":"1. Port Already in Use","text":"<pre><code># Check what's using the port\nlsof -i :4317\n\n# Kill the process\nkill -9 &lt;PID&gt;\n</code></pre>"},{"location":"deployment/docker/#2-configuration-errors","title":"2. Configuration Errors","text":"<pre><code># Validate configuration\ndocker run --rm -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:latest --config=/etc/otelcol/config.yaml --dry-run\n</code></pre>"},{"location":"deployment/docker/#3-permission-issues","title":"3. Permission Issues","text":"<pre><code># Check file permissions\nls -la config.yaml\n\n# Fix permissions\nchmod 644 config.yaml\n</code></pre>"},{"location":"deployment/docker/#debug-commands","title":"Debug Commands","text":"<pre><code># Check container logs\ndocker logs &lt;container-id&gt;\n\n# Check container status\ndocker ps | grep otel-collector\n\n# Check resource usage\ndocker stats &lt;container-id&gt;\n\n# Execute commands in container\ndocker exec -it &lt;container-id&gt; /bin/sh\n</code></pre>"},{"location":"deployment/docker/#health-checks_1","title":"Health Checks","text":"<pre><code># Check collector health\ncurl http://localhost:8888/\n\n# Check metrics\ncurl http://localhost:8888/metrics\n\n# Check configuration\ncurl http://localhost:8888/config\n</code></pre>"},{"location":"deployment/docker/#monitoring","title":"Monitoring","text":""},{"location":"deployment/docker/#metrics-endpoint","title":"Metrics Endpoint","text":"<pre><code># Prometheus metrics\ncurl http://localhost:8888/metrics\n\n# Health check\ncurl http://localhost:8888/\n</code></pre>"},{"location":"deployment/docker/#log-monitoring","title":"Log Monitoring","text":"<pre><code># Follow logs\ndocker logs -f &lt;container-id&gt;\n\n# Filter error logs\ndocker logs &lt;container-id&gt; | grep ERROR\n\n# Filter debug logs\ndocker logs &lt;container-id&gt; | grep DEBUG\n</code></pre>"},{"location":"deployment/docker/#security","title":"Security","text":""},{"location":"deployment/docker/#non-root-user","title":"Non-Root User","text":"<p>The container runs as a non-root user (<code>otelcol</code>) for security.</p>"},{"location":"deployment/docker/#network-security","title":"Network Security","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"127.0.0.1:4317:4317\"  # Bind to localhost only\n      - \"127.0.0.1:4318:4318\"\n      - \"127.0.0.1:8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#tls-configuration","title":"TLS Configuration","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n        tls:\n          cert_file: /etc/otelcol/tls/server.crt\n          key_file: /etc/otelcol/tls/server.key\n</code></pre>"},{"location":"deployment/docker/#performance-tuning","title":"Performance Tuning","text":""},{"location":"deployment/docker/#resource-allocation","title":"Resource Allocation","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    deploy:\n      resources:\n        limits:\n          cpus: '4.0'\n          memory: 8G\n        reservations:\n          cpus: '2.0'\n          memory: 4G\n    environment:\n      - GOMAXPROCS=4\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#batch-processing","title":"Batch Processing","text":"<pre><code>processors:\n  batch:\n    timeout: 1s\n    send_batch_size: 1024\n    send_batch_max_size: 2048\n</code></pre>"},{"location":"deployment/kubernetes/","title":"Kubernetes Deployment","text":"<p>Deploy the ProfileToMetrics Connector on Kubernetes using the provided manifests.</p>"},{"location":"deployment/kubernetes/#quick-start","title":"Quick Start","text":""},{"location":"deployment/kubernetes/#apply-all-manifests","title":"Apply All Manifests","text":"<pre><code># Create namespace\nkubectl apply -f k8s/namespace.yaml\n\n# Apply RBAC\nkubectl apply -f k8s/rbac.yaml\n\n# Apply configuration\nkubectl apply -f k8s/configmap.yaml\n\n# Deploy collector\nkubectl apply -f k8s/deployment.yaml\n\n# Create service\nkubectl apply -f k8s/service.yaml\n</code></pre>"},{"location":"deployment/kubernetes/#verify-deployment","title":"Verify Deployment","text":"<pre><code># Check pods\nkubectl get pods -n otel-collector\n\n# Check logs\nkubectl logs -n otel-collector deployment/otel-collector\n\n# Check service\nkubectl get svc -n otel-collector\n</code></pre>"},{"location":"deployment/kubernetes/#manifest-details","title":"Manifest Details","text":""},{"location":"deployment/kubernetes/#namespace","title":"Namespace","text":"<pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: otel-collector\n  labels:\n    name: otel-collector\n</code></pre>"},{"location":"deployment/kubernetes/#rbac","title":"RBAC","text":"<pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: otel-collector\n  namespace: otel-collector\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: otel-collector\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"nodes\", \"nodes/proxy\", \"nodes/stats\", \"nodes/metrics\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"services\", \"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"namespaces\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: otel-collector\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: otel-collector\nsubjects:\n  - kind: ServiceAccount\n    name: otel-collector\n    namespace: otel-collector\n</code></pre>"},{"location":"deployment/kubernetes/#configmap","title":"ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: otel-collector-config\n  namespace: otel-collector\ndata:\n  config.yaml: |\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n\n    connectors:\n      profiletometrics:\n        metrics:\n          cpu:\n            enabled: true\n            metric_name: \"cpu_time\"\n          memory:\n            enabled: true\n            metric_name: \"memory_allocation\"\n        attributes:\n          - key: \"k8s.namespace\"\n            value: \"otel-collector\"\n          - key: \"k8s.pod.name\"\n            value: \"pod-.*\"\n\n    exporters:\n      debug:\n        verbosity: detailed\n      otlp:\n        endpoint: \"http://observability-platform:4317\"\n\n    service:\n      pipelines:\n        traces:\n          receivers: [otlp]\n          connectors: [profiletometrics]\n        metrics:\n          receivers: [profiletometrics]\n          exporters: [debug, otlp]\n</code></pre>"},{"location":"deployment/kubernetes/#deployment","title":"Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: otel-collector\n  namespace: otel-collector\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: otel-collector\n  template:\n    metadata:\n      labels:\n        app: otel-collector\n    spec:\n      serviceAccountName: otel-collector\n      containers:\n        - name: otel-collector\n          image: hrexed/otel-collector-profilemetrics:latest\n          ports:\n            - containerPort: 4317\n              name: otlp-grpc\n            - containerPort: 4318\n              name: otlp-http\n            - containerPort: 8888\n              name: health-check\n          env:\n            - name: OTEL_LOG_LEVEL\n              value: \"info\"\n          volumeMounts:\n            - name: config\n              mountPath: /etc/otelcol\n          livenessProbe:\n            httpGet:\n              path: /\n              port: 8888\n            initialDelaySeconds: 30\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /\n              port: 8888\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 1Gi\n            requests:\n              cpu: 500m\n              memory: 512Mi\n      volumes:\n        - name: config\n          configMap:\n            name: otel-collector-config\n</code></pre>"},{"location":"deployment/kubernetes/#service","title":"Service","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: otel-collector\n  namespace: otel-collector\nspec:\n  selector:\n    app: otel-collector\n  ports:\n    - name: otlp-grpc\n      port: 4317\n      targetPort: 4317\n    - name: otlp-http\n      port: 4318\n      targetPort: 4318\n    - name: health-check\n      port: 8888\n      targetPort: 8888\n  type: ClusterIP\n</code></pre>"},{"location":"deployment/kubernetes/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"deployment/kubernetes/#horizontal-pod-autoscaler","title":"Horizontal Pod Autoscaler","text":"<pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: otel-collector-hpa\n  namespace: otel-collector\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: otel-collector\n  minReplicas: 1\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n    - type: Resource\n      resource:\n        name: memory\n        target:\n          type: Utilization\n          averageUtilization: 80\n</code></pre>"},{"location":"deployment/kubernetes/#pod-disruption-budget","title":"Pod Disruption Budget","text":"<pre><code>apiVersion: policy/v1\nkind: PodDisruptionBudget\nmetadata:\n  name: otel-collector-pdb\n  namespace: otel-collector\nspec:\n  minAvailable: 1\n  selector:\n    matchLabels:\n      app: otel-collector\n</code></pre>"},{"location":"deployment/kubernetes/#network-policy","title":"Network Policy","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: otel-collector-netpol\n  namespace: otel-collector\nspec:\n  podSelector:\n    matchLabels:\n      app: otel-collector\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - namespaceSelector:\n            matchLabels:\n              name: default\n      ports:\n        - protocol: TCP\n          port: 4317\n        - protocol: TCP\n          port: 4318\n        - protocol: TCP\n          port: 8888\n  egress:\n    - to: []\n      ports:\n        - protocol: TCP\n          port: 53\n        - protocol: UDP\n          port: 53\n</code></pre>"},{"location":"deployment/kubernetes/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"deployment/kubernetes/#development","title":"Development","text":"<pre><code># configmap.yaml\ndata:\n  config.yaml: |\n    service:\n      telemetry:\n        logs:\n          level: debug\n          development: true\n    exporters:\n      debug:\n        verbosity: detailed\n</code></pre>"},{"location":"deployment/kubernetes/#production","title":"Production","text":"<pre><code># configmap.yaml\ndata:\n  config.yaml: |\n    service:\n      telemetry:\n        logs:\n          level: info\n          development: false\n    exporters:\n      otlp:\n        endpoint: \"http://observability-platform:4317\"\n        tls:\n          insecure: false\n        compression: gzip\n</code></pre>"},{"location":"deployment/kubernetes/#staging","title":"Staging","text":"<pre><code># configmap.yaml\ndata:\n  config.yaml: |\n    service:\n      telemetry:\n        logs:\n          level: warn\n          development: false\n    exporters:\n      debug:\n        verbosity: normal\n      otlp:\n        endpoint: \"http://staging-observability:4317\"\n        tls:\n          insecure: true\n</code></pre>"},{"location":"deployment/kubernetes/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"deployment/kubernetes/#prometheus-servicemonitor","title":"Prometheus ServiceMonitor","text":"<pre><code>apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: otel-collector\n  namespace: otel-collector\nspec:\n  selector:\n    matchLabels:\n      app: otel-collector\n  endpoints:\n    - port: health-check\n      path: /metrics\n      interval: 30s\n</code></pre>"},{"location":"deployment/kubernetes/#grafana-dashboard","title":"Grafana Dashboard","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: otel-collector-dashboard\n  namespace: otel-collector\ndata:\n  dashboard.json: |\n    {\n      \"dashboard\": {\n        \"title\": \"OpenTelemetry Collector\",\n        \"panels\": [\n          {\n            \"title\": \"CPU Usage\",\n            \"type\": \"stat\",\n            \"targets\": [\n              {\n                \"expr\": \"rate(otelcol_process_cpu_seconds_total[5m])\"\n              }\n            ]\n          }\n        ]\n      }\n    }\n</code></pre>"},{"location":"deployment/kubernetes/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/kubernetes/#common-issues","title":"Common Issues","text":""},{"location":"deployment/kubernetes/#1-pod-not-starting","title":"1. Pod Not Starting","text":"<pre><code># Check pod status\nkubectl get pods -n otel-collector\n\n# Check pod events\nkubectl describe pod -n otel-collector &lt;pod-name&gt;\n\n# Check logs\nkubectl logs -n otel-collector &lt;pod-name&gt;\n</code></pre>"},{"location":"deployment/kubernetes/#2-configuration-errors","title":"2. Configuration Errors","text":"<pre><code># Check configmap\nkubectl get configmap -n otel-collector otel-collector-config -o yaml\n\n# Validate configuration\nkubectl exec -n otel-collector deployment/otel-collector -- otelcol --config=/etc/otelcol/config.yaml --dry-run\n</code></pre>"},{"location":"deployment/kubernetes/#3-rbac-issues","title":"3. RBAC Issues","text":"<pre><code># Check service account\nkubectl get serviceaccount -n otel-collector otel-collector\n\n# Check cluster role\nkubectl get clusterrole otel-collector\n\n# Check cluster role binding\nkubectl get clusterrolebinding otel-collector\n</code></pre>"},{"location":"deployment/kubernetes/#debug-commands","title":"Debug Commands","text":"<pre><code># Port forward for local access\nkubectl port-forward -n otel-collector svc/otel-collector 4317:4317 8888:8888\n\n# Check health\ncurl http://localhost:8888/\n\n# Check metrics\ncurl http://localhost:8888/metrics\n\n# Execute commands in pod\nkubectl exec -it -n otel-collector deployment/otel-collector -- /bin/sh\n</code></pre>"},{"location":"deployment/kubernetes/#log-analysis","title":"Log Analysis","text":"<pre><code># Follow logs\nkubectl logs -f -n otel-collector deployment/otel-collector\n\n# Filter error logs\nkubectl logs -n otel-collector deployment/otel-collector | grep ERROR\n\n# Filter debug logs\nkubectl logs -n otel-collector deployment/otel-collector | grep DEBUG\n</code></pre>"},{"location":"deployment/kubernetes/#security","title":"Security","text":""},{"location":"deployment/kubernetes/#pod-security-standards","title":"Pod Security Standards","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: otel-collector\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 10001\n    fsGroup: 10001\n  containers:\n    - name: otel-collector\n      securityContext:\n        allowPrivilegeEscalation: false\n        readOnlyRootFilesystem: true\n        runAsNonRoot: true\n        runAsUser: 10001\n        capabilities:\n          drop:\n            - ALL\n</code></pre>"},{"location":"deployment/kubernetes/#network-security","title":"Network Security","text":"<pre><code>apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: otel-collector-netpol\nspec:\n  podSelector:\n    matchLabels:\n      app: otel-collector\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - namespaceSelector:\n            matchLabels:\n              name: default\n      ports:\n        - protocol: TCP\n          port: 4317\n        - protocol: TCP\n          port: 4318\n        - protocol: TCP\n          port: 8888\n  egress:\n    - to: []\n      ports:\n        - protocol: TCP\n          port: 53\n        - protocol: UDP\n          port: 53\n</code></pre>"},{"location":"deployment/kubernetes/#performance-tuning","title":"Performance Tuning","text":""},{"location":"deployment/kubernetes/#resource-limits","title":"Resource Limits","text":"<pre><code>resources:\n  limits:\n    cpu: 2000m\n    memory: 4Gi\n  requests:\n    cpu: 1000m\n    memory: 2Gi\n</code></pre>"},{"location":"deployment/kubernetes/#batch-processing","title":"Batch Processing","text":"<pre><code>processors:\n  batch:\n    timeout: 1s\n    send_batch_size: 1024\n    send_batch_max_size: 2048\n</code></pre>"},{"location":"deployment/kubernetes/#horizontal-scaling","title":"Horizontal Scaling","text":"<pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: otel-collector-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: otel-collector\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70\n</code></pre>"},{"location":"development/architecture/","title":"Architecture","text":"<p>This document describes the architecture of the ProfileToMetrics Connector and its components.</p>"},{"location":"development/architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    A[Profiling Data] --&gt; B[OpenTelemetry Collector]\n    B --&gt; C[ProfileToMetrics Connector]\n    C --&gt; D[String Table Extraction]\n    D --&gt; E[Sample Processing]\n    E --&gt; F[CPU/Memory Detection]\n    F --&gt; G[Metric Generation]\n    G --&gt; H[Attribute Attachment]\n    H --&gt; I[Filtering]\n    I --&gt; J[OpenTelemetry Metrics]\n    J --&gt; K[Exporters]\n    K --&gt; L[Observability Platform]</code></pre>"},{"location":"development/architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"development/architecture/#core-components","title":"Core Components","text":"<pre><code>graph LR\n    A[Connector Factory] --&gt; B[Connector Implementation]\n    B --&gt; C[Converter]\n    C --&gt; D[Configuration]\n    C --&gt; E[String Table Extractor]\n    C --&gt; F[Sample Processor]\n    C --&gt; G[Metric Generator]\n    C --&gt; H[Filter]</code></pre>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Collector\n    participant Connector\n    participant Converter\n    participant Exporter\n\n    Client-&gt;&gt;Collector: Send Profiling Data\n    Collector-&gt;&gt;Connector: Process Traces/Logs\n    Connector-&gt;&gt;Converter: Convert to Metrics\n    Converter-&gt;&gt;Converter: Extract Attributes\n    Converter-&gt;&gt;Converter: Process Samples\n    Converter-&gt;&gt;Converter: Generate Metrics\n    Converter-&gt;&gt;Connector: Return Metrics\n    Connector-&gt;&gt;Exporter: Send Metrics\n    Exporter-&gt;&gt;Client: Export Metrics</code></pre>"},{"location":"development/architecture/#connector-architecture","title":"Connector Architecture","text":""},{"location":"development/architecture/#factory-pattern","title":"Factory Pattern","text":"<pre><code>type Factory struct {\n    component.MustNewType\n}\n\nfunc (f *Factory) CreateDefaultConfig() component.Config {\n    return &amp;Config{\n        Metrics: MetricsConfig{\n            CPU: CPUMetricsConfig{Enabled: true},\n            Memory: MemoryMetricsConfig{Enabled: true},\n        },\n    }\n}\n\nfunc (f *Factory) CreateConnector(\n    ctx context.Context,\n    params connector.CreateSettings,\n    cfg component.Config,\n    nextConsumer consumer.Metrics,\n) (connector.Connector, error) {\n    // Create connector instance\n}\n</code></pre>"},{"location":"development/architecture/#connector-implementation","title":"Connector Implementation","text":"<pre><code>type profileToMetricsConnector struct {\n    config       *Config\n    nextConsumer consumer.Metrics\n    logger       *zap.Logger\n    converter    *profiletometrics.ConverterConnector\n}\n\nfunc (c *profileToMetricsConnector) Start(ctx context.Context, host component.Host) error {\n    // Initialize converter\n    c.converter = profiletometrics.NewConverterConnector(converterConfig)\n    return nil\n}\n\nfunc (c *profileToMetricsConnector) ConsumeTraces(ctx context.Context, td ptrace.Traces) error {\n    // Convert traces to metrics\n    metrics, err := c.converter.ConvertTracesToMetrics(td)\n    if err != nil {\n        return err\n    }\n\n    // Send to next consumer\n    return c.nextConsumer.ConsumeMetrics(ctx, metrics)\n}\n</code></pre>"},{"location":"development/architecture/#converter-architecture","title":"Converter Architecture","text":""},{"location":"development/architecture/#core-converter","title":"Core Converter","text":"<pre><code>type ConverterConnector struct {\n    config ConverterConfig\n    logger *zap.Logger\n}\n\nfunc (c *ConverterConnector) ConvertProfilesToMetrics(\n    ctx context.Context,\n    profiles pprofile.Profiles,\n) (pmetric.Metrics, error) {\n    // Extract attributes from string table\n    attributes := c.extractAttributes(profiles)\n\n    // Process samples\n    cpuMetrics := c.processCPUSamples(profiles, attributes)\n    memoryMetrics := c.processMemorySamples(profiles, attributes)\n\n    // Combine metrics\n    return c.combineMetrics(cpuMetrics, memoryMetrics), nil\n}\n</code></pre>"},{"location":"development/architecture/#string-table-extraction","title":"String Table Extraction","text":"<pre><code>func (c *ConverterConnector) extractAttributes(profiles pprofile.Profiles) map[string]string {\n    attributes := make(map[string]string)\n\n    for i := 0; i &lt; profiles.ResourceProfiles().Len(); i++ {\n        resourceProfile := profiles.ResourceProfiles().At(i)\n\n        // Extract from resource attributes\n        resourceProfile.Resource().Attributes().Range(func(k string, v pcommon.Value) bool {\n            attributes[k] = v.AsString()\n            return true\n        })\n\n        // Extract from string table\n        for j := 0; j &lt; resourceProfile.ScopeProfiles().Len(); j++ {\n            scopeProfile := resourceProfile.ScopeProfiles().At(j)\n            for k := 0; k &lt; scopeProfile.Profiles().Len(); k++ {\n                profile := scopeProfile.Profiles().At(k)\n                attributes = c.extractFromStringTable(profile, attributes)\n            }\n        }\n    }\n\n    return attributes\n}\n</code></pre>"},{"location":"development/architecture/#sample-processing","title":"Sample Processing","text":"<pre><code>func (c *ConverterConnector) processCPUSamples(\n    profiles pprofile.Profiles,\n    attributes map[string]string,\n) pmetric.Metrics {\n    metrics := pmetric.NewMetrics()\n\n    for i := 0; i &lt; profiles.ResourceProfiles().Len(); i++ {\n        resourceProfile := profiles.ResourceProfiles().At(i)\n\n        for j := 0; j &lt; resourceProfile.ScopeProfiles().Len(); j++ {\n            scopeProfile := resourceProfile.ScopeProfiles().At(j)\n\n            for k := 0; k &lt; scopeProfile.Profiles().Len(); k++ {\n                profile := scopeProfile.Profiles().At(k)\n\n                // Process CPU samples\n                cpuTime := c.calculateCPUTime(profile.Samples())\n                if cpuTime &gt; 0 {\n                    c.addCPUMetric(metrics, cpuTime, attributes)\n                }\n            }\n        }\n    }\n\n    return metrics\n}\n</code></pre>"},{"location":"development/architecture/#configuration-architecture","title":"Configuration Architecture","text":""},{"location":"development/architecture/#configuration-structure","title":"Configuration Structure","text":"<pre><code>type Config struct {\n    Metrics       MetricsConfig       `mapstructure:\"metrics\"`\n    Attributes    []AttributeConfig   `mapstructure:\"attributes\"`\n    ProcessFilter ProcessFilterConfig `mapstructure:\"process_filter\"`\n    ThreadFilter  ThreadFilterConfig  `mapstructure:\"thread_filter\"`\n    PatternFilter PatternFilterConfig  `mapstructure:\"pattern_filter\"`\n}\n\ntype MetricsConfig struct {\n    CPU    CPUMetricsConfig    `mapstructure:\"cpu\"`\n    Memory MemoryMetricsConfig `mapstructure:\"memory\"`\n}\n\ntype CPUMetricsConfig struct {\n    Enabled     bool   `mapstructure:\"enabled\"`\n    MetricName  string `mapstructure:\"metric_name\"`\n    Description string `mapstructure:\"description\"`\n    Unit        string `mapstructure:\"unit\"`\n}\n</code></pre>"},{"location":"development/architecture/#configuration-validation","title":"Configuration Validation","text":"<pre><code>func (cfg *MetricsConfig) Validate() error {\n    if !cfg.CPU.Enabled &amp;&amp; !cfg.Memory.Enabled {\n        return fmt.Errorf(\"at least one metric type must be enabled\")\n    }\n\n    if cfg.CPU.Enabled {\n        if err := cfg.CPU.Validate(); err != nil {\n            return fmt.Errorf(\"CPU metrics configuration error: %w\", err)\n        }\n    }\n\n    if cfg.Memory.Enabled {\n        if err := cfg.Memory.Validate(); err != nil {\n            return fmt.Errorf(\"memory metrics configuration error: %w\", err)\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"development/architecture/#filtering-architecture","title":"Filtering Architecture","text":""},{"location":"development/architecture/#process-filtering","title":"Process Filtering","text":"<pre><code>type ProcessFilterConfig struct {\n    Enabled bool   `mapstructure:\"enabled\"`\n    Pattern string `mapstructure:\"pattern\"`\n    compiledPattern *regexp.Regexp\n}\n\nfunc (cfg *ProcessFilterConfig) Validate() error {\n    if cfg.Enabled &amp;&amp; cfg.Pattern != \"\" {\n        var err error\n        cfg.compiledPattern, err = regexp.Compile(cfg.Pattern)\n        if err != nil {\n            return fmt.Errorf(\"invalid process filter pattern: %w\", err)\n        }\n    }\n    return nil\n}\n\nfunc (cfg *ProcessFilterConfig) Matches(processName string) bool {\n    if !cfg.Enabled || cfg.compiledPattern == nil {\n        return true\n    }\n    return cfg.compiledPattern.MatchString(processName)\n}\n</code></pre>"},{"location":"development/architecture/#thread-filtering","title":"Thread Filtering","text":"<pre><code>type ThreadFilterConfig struct {\n    Enabled bool   `mapstructure:\"enabled\"`\n    Pattern string `mapstructure:\"pattern\"`\n    compiledPattern *regexp.Regexp\n}\n\nfunc (cfg *ThreadFilterConfig) Matches(threadName string) bool {\n    if !cfg.Enabled || cfg.compiledPattern == nil {\n        return true\n    }\n    return cfg.compiledPattern.MatchString(threadName)\n}\n</code></pre>"},{"location":"development/architecture/#pattern-filtering","title":"Pattern Filtering","text":"<pre><code>type PatternFilterConfig struct {\n    Enabled bool   `mapstructure:\"enabled\"`\n    Pattern string `mapstructure:\"pattern\"`\n    compiledPattern *regexp.Regexp\n}\n\nfunc (cfg *PatternFilterConfig) Matches(attributeValue string) bool {\n    if !cfg.Enabled || cfg.compiledPattern == nil {\n        return true\n    }\n    return cfg.compiledPattern.MatchString(attributeValue)\n}\n</code></pre>"},{"location":"development/architecture/#metric-generation-architecture","title":"Metric Generation Architecture","text":""},{"location":"development/architecture/#cpu-metrics","title":"CPU Metrics","text":"<pre><code>func (c *ConverterConnector) generateCPUMetrics(\n    samples []pprofile.Sample,\n    attributes map[string]string,\n) pmetric.Metrics {\n    metrics := pmetric.NewMetrics()\n\n    // Calculate CPU time\n    cpuTime := c.calculateCPUTime(samples)\n    if cpuTime &lt;= 0 {\n        return metrics\n    }\n\n    // Create metric\n    resourceMetrics := metrics.ResourceMetrics()\n    resourceMetric := resourceMetrics.AppendEmpty()\n\n    // Set resource attributes\n    resourceAttrs := resourceMetric.Resource().Attributes()\n    for k, v := range attributes {\n        resourceAttrs.PutStr(k, v)\n    }\n\n    // Create scope metrics\n    scopeMetrics := resourceMetric.ScopeMetrics()\n    scopeMetric := scopeMetrics.AppendEmpty()\n    scopeMetric.Scope().SetName(\"profiletometrics\")\n    scopeMetric.Scope().SetVersion(\"0.1.0\")\n\n    // Create metric\n    metricSlice := scopeMetric.Metrics()\n    metric := metricSlice.AppendEmpty()\n    metric.SetName(c.config.Metrics.CPU.MetricName)\n    metric.SetDescription(c.config.Metrics.CPU.Description)\n    metric.SetUnit(c.config.Metrics.CPU.Unit)\n\n    // Set metric type and data\n    metric.SetEmptySum()\n    sum := metric.Sum()\n    sum.SetIsMonotonic(true)\n    sum.SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)\n\n    // Add data point\n    dataPoints := sum.DataPoints()\n    dataPoint := dataPoints.AppendEmpty()\n    dataPoint.SetDoubleValue(cpuTime)\n    dataPoint.SetTimestamp(pcommon.NewTimestampFromTime(time.Now()))\n\n    return metrics\n}\n</code></pre>"},{"location":"development/architecture/#memory-metrics","title":"Memory Metrics","text":"<pre><code>func (c *ConverterConnector) generateMemoryMetrics(\n    samples []pprofile.Sample,\n    attributes map[string]string,\n) pmetric.Metrics {\n    metrics := pmetric.NewMetrics()\n\n    // Calculate memory allocation\n    memoryAllocation := c.calculateMemoryAllocation(samples)\n    if memoryAllocation &lt;= 0 {\n        return metrics\n    }\n\n    // Create metric similar to CPU metrics\n    // ... implementation details ...\n\n    return metrics\n}\n</code></pre>"},{"location":"development/architecture/#error-handling-architecture","title":"Error Handling Architecture","text":""},{"location":"development/architecture/#error-types","title":"Error Types","text":"<pre><code>type ConversionError struct {\n    Type    string\n    Message string\n    Cause   error\n}\n\nfunc (e *ConversionError) Error() string {\n    return fmt.Sprintf(\"%s: %s\", e.Type, e.Message)\n}\n\nfunc (e *ConversionError) Unwrap() error {\n    return e.Cause\n}\n\nvar (\n    ErrInvalidConfiguration = &amp;ConversionError{\n        Type:    \"ConfigurationError\",\n        Message: \"invalid configuration\",\n    }\n\n    ErrInvalidProfilingData = &amp;ConversionError{\n        Type:    \"DataError\",\n        Message: \"invalid profiling data\",\n    }\n\n    ErrMetricGeneration = &amp;ConversionError{\n        Type:    \"MetricError\",\n        Message: \"failed to generate metrics\",\n    }\n)\n</code></pre>"},{"location":"development/architecture/#error-handling","title":"Error Handling","text":"<pre><code>func (c *ConverterConnector) ConvertProfilesToMetrics(\n    ctx context.Context,\n    profiles pprofile.Profiles,\n) (pmetric.Metrics, error) {\n    // Validate input\n    if profiles.ResourceProfiles().Len() == 0 {\n        return pmetric.NewMetrics(), ErrInvalidProfilingData\n    }\n\n    // Process with error handling\n    metrics, err := c.processProfiles(profiles)\n    if err != nil {\n        return pmetric.NewMetrics(), fmt.Errorf(\"failed to process profiles: %w\", err)\n    }\n\n    return metrics, nil\n}\n</code></pre>"},{"location":"development/architecture/#logging-architecture","title":"Logging Architecture","text":""},{"location":"development/architecture/#structured-logging","title":"Structured Logging","text":"<pre><code>func (c *profileToMetricsConnector) ConsumeTraces(ctx context.Context, td ptrace.Traces) error {\n    // Log input statistics\n    resourceSpansCount := td.ResourceSpans().Len()\n    totalSpans := 0\n    for i := 0; i &lt; resourceSpansCount; i++ {\n        totalSpans += td.ResourceSpans().At(i).ScopeSpans().Len()\n    }\n\n    c.logger.Debug(\"Processing traces\",\n        zap.Int(\"resource_spans_count\", resourceSpansCount),\n        zap.Int(\"total_spans\", totalSpans),\n    )\n\n    // Process traces\n    metrics, err := c.converter.ConvertTracesToMetrics(td)\n    if err != nil {\n        c.logger.Error(\"Failed to convert traces to metrics\",\n            zap.Error(err),\n            zap.Int(\"input_spans\", totalSpans),\n        )\n        return err\n    }\n\n    // Log output statistics\n    resourceMetricsCount := metrics.ResourceMetrics().Len()\n    totalMetrics := 0\n    for i := 0; i &lt; resourceMetricsCount; i++ {\n        scopeMetrics := metrics.ResourceMetrics().At(i).ScopeMetrics()\n        for j := 0; j &lt; scopeMetrics.Len(); j++ {\n            totalMetrics += scopeMetrics.At(j).Metrics().Len()\n        }\n    }\n\n    c.logger.Debug(\"Traces converted to metrics\",\n        zap.Int(\"input_spans\", totalSpans),\n        zap.Int(\"output_resource_metrics\", resourceMetricsCount),\n        zap.Int(\"output_metrics\", totalMetrics),\n    )\n\n    return c.nextConsumer.ConsumeMetrics(ctx, metrics)\n}\n</code></pre>"},{"location":"development/architecture/#performance-architecture","title":"Performance Architecture","text":""},{"location":"development/architecture/#caching","title":"Caching","text":"<pre><code>type ConverterConnector struct {\n    config ConverterConfig\n    logger *zap.Logger\n    cache  map[string]interface{}\n    mutex  sync.RWMutex\n}\n\nfunc (c *ConverterConnector) getCachedAttribute(key string) (string, bool) {\n    c.mutex.RLock()\n    defer c.mutex.RUnlock()\n\n    value, exists := c.cache[key]\n    if !exists {\n        return \"\", false\n    }\n\n    strValue, ok := value.(string)\n    return strValue, ok\n}\n\nfunc (c *ConverterConnector) setCachedAttribute(key, value string) {\n    c.mutex.Lock()\n    defer c.mutex.Unlock()\n\n    c.cache[key] = value\n}\n</code></pre>"},{"location":"development/architecture/#batch-processing","title":"Batch Processing","text":"<pre><code>func (c *ConverterConnector) processBatch(\n    profiles []pprofile.Profiles,\n    batchSize int,\n) ([]pmetric.Metrics, error) {\n    var results []pmetric.Metrics\n\n    for i := 0; i &lt; len(profiles); i += batchSize {\n        end := i + batchSize\n        if end &gt; len(profiles) {\n            end = len(profiles)\n        }\n\n        batch := profiles[i:end]\n        batchResults, err := c.processBatch(batch)\n        if err != nil {\n            return nil, err\n        }\n\n        results = append(results, batchResults...)\n    }\n\n    return results, nil\n}\n</code></pre>"},{"location":"development/architecture/#testing-architecture","title":"Testing Architecture","text":""},{"location":"development/architecture/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 converter_test.go\n\u2502   \u251c\u2500\u2500 config_test.go\n\u2502   \u2514\u2500\u2500 connector_test.go\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 end_to_end_test.go\n\u2502   \u2514\u2500\u2500 performance_test.go\n\u2514\u2500\u2500 testdata/\n    \u251c\u2500\u2500 profile_test_data.go\n    \u2514\u2500\u2500 config_test_data.go\n</code></pre>"},{"location":"development/architecture/#test-utilities","title":"Test Utilities","text":"<pre><code>func createTestConverter(t *testing.T, config ConverterConfig) *ConverterConnector {\n    t.Helper()\n\n    logger, _ := zap.NewDevelopment()\n    return &amp;ConverterConnector{\n        config: config,\n        logger: logger,\n    }\n}\n\nfunc assertMetricsEqual(t *testing.T, expected, actual pmetric.Metrics) {\n    t.Helper()\n\n    // Compare metrics structure and values\n    assert.Equal(t, expected.ResourceMetrics().Len(), actual.ResourceMetrics().Len())\n\n    for i := 0; i &lt; expected.ResourceMetrics().Len(); i++ {\n        expectedRM := expected.ResourceMetrics().At(i)\n        actualRM := actual.ResourceMetrics().At(i)\n\n        assert.Equal(t, expectedRM.ScopeMetrics().Len(), actualRM.ScopeMetrics().Len())\n    }\n}\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide covers different ways to install and use the ProfileToMetrics Connector.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>OpenTelemetry Collector: Version 0.137.0 or later</li> <li>Go: Version 1.23.0 or later (for building from source)</li> <li>Docker: For containerized deployment</li> <li>Kubernetes: For K8s deployment (optional)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#1-docker-recommended","title":"1. Docker (Recommended)","text":"<p>The easiest way to get started is using the pre-built Docker image.</p>"},{"location":"getting-started/installation/#pull-the-image","title":"Pull the Image","text":"<pre><code>docker pull hrexed/otel-collector-profilemetrics:latest\n</code></pre>"},{"location":"getting-started/installation/#run-with-configuration","title":"Run with Configuration","text":"<pre><code>docker run -p 4317:4317 -p 8888:8888 \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:latest\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>OTEL_CONFIG</code> <code>/etc/otelcol/config.yaml</code> Path to configuration file <code>OTEL_LOG_LEVEL</code> <code>info</code> Log level (debug, info, warn, error)"},{"location":"getting-started/installation/#2-kubernetes","title":"2. Kubernetes","text":"<p>Deploy using the provided Kubernetes manifests.</p>"},{"location":"getting-started/installation/#quick-deploy","title":"Quick Deploy","text":"<pre><code># Apply all manifests\nkubectl apply -f k8s/namespace.yaml\nkubectl apply -f k8s/rbac.yaml\nkubectl apply -f k8s/configmap.yaml\nkubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n</code></pre>"},{"location":"getting-started/installation/#verify-deployment","title":"Verify Deployment","text":"<pre><code># Check pods\nkubectl get pods -n otel-collector\n\n# Check logs\nkubectl logs -n otel-collector deployment/otel-collector\n\n# Check service\nkubectl get svc -n otel-collector\n</code></pre>"},{"location":"getting-started/installation/#3-build-from-source","title":"3. Build from Source","text":""},{"location":"getting-started/installation/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Go 1.23.0+</li> <li>Git</li> <li>Make</li> </ul>"},{"location":"getting-started/installation/#build-steps","title":"Build Steps","text":"<pre><code># Clone the repository\ngit clone https://github.com/henrikrexed/profiletoMetrics.git\ncd profiletoMetrics\n\n# Install dependencies\ngo mod tidy\n\n# Run tests\nmake test\n\n# Build the collector\nmake build\n\n# Build Docker image\nmake docker-build\n</code></pre>"},{"location":"getting-started/installation/#using-makefile","title":"Using Makefile","text":"<p>The project includes a comprehensive Makefile with the following targets:</p> <pre><code># Build the collector\nmake build\n\n# Run tests\nmake test\n\n# Build Docker image\nmake docker-build\n\n# Install OCB (OpenTelemetry Collector Builder)\nmake install-ocb\n\n# Clean build artifacts\nmake clean\n</code></pre>"},{"location":"getting-started/installation/#4-opentelemetry-collector-builder-ocb","title":"4. OpenTelemetry Collector Builder (OCB)","text":"<p>Build a custom collector with the ProfileToMetrics connector.</p>"},{"location":"getting-started/installation/#install-ocb","title":"Install OCB","text":"<pre><code># Install OCB\ngo install go.opentelemetry.io/collector/cmd/builder@v0.137.0\n\n# Verify installation\nbuilder --version\n</code></pre>"},{"location":"getting-started/installation/#build-custom-collector","title":"Build Custom Collector","text":"<pre><code># Build with OCB\nocb --config ocb/manifest.yaml\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#basic-configuration","title":"Basic Configuration","text":"<p>Create a <code>config.yaml</code> file:</p> <pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n\nexporters:\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\n</code></pre>"},{"location":"getting-started/installation/#advanced-configuration","title":"Advanced Configuration","text":"<p>See the Configuration Guide for detailed configuration options.</p>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#1-check-collector-status","title":"1. Check Collector Status","text":"<pre><code># Health check endpoint\ncurl http://localhost:8888/\n\n# Metrics endpoint\ncurl http://localhost:8888/metrics\n</code></pre>"},{"location":"getting-started/installation/#2-send-test-data","title":"2. Send Test Data","text":"<pre><code># Send test profiling data\n./scripts/send-test-data.sh\n</code></pre>"},{"location":"getting-started/installation/#3-check-logs","title":"3. Check Logs","text":"<pre><code># Docker logs\ndocker logs &lt;container-id&gt;\n\n# Kubernetes logs\nkubectl logs -n otel-collector deployment/otel-collector\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#1-port-already-in-use","title":"1. Port Already in Use","text":"<pre><code># Check what's using the port\nlsof -i :4317\n\n# Kill the process\nkill -9 &lt;PID&gt;\n</code></pre>"},{"location":"getting-started/installation/#2-configuration-errors","title":"2. Configuration Errors","text":"<pre><code># Validate configuration\notelcol --config config.yaml --dry-run\n</code></pre>"},{"location":"getting-started/installation/#3-permission-issues-kubernetes","title":"3. Permission Issues (Kubernetes)","text":"<pre><code># Check RBAC\nkubectl auth can-i create pods --as=system:serviceaccount:otel-collector:otel-collector\n</code></pre>"},{"location":"getting-started/installation/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging for troubleshooting:</p> <pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide</li> <li>Configuration Reference</li> <li>Deployment Options</li> </ul>"},{"location":"getting-started/overview/","title":"Overview","text":"<p>The ProfileToMetrics Connector is an OpenTelemetry Collector connector that transforms profiling data into metrics. It's designed to be generic and configurable, allowing users to extract meaningful metrics from profiling data.</p>"},{"location":"getting-started/overview/#what-is-profiling-data","title":"What is Profiling Data?","text":"<p>Profiling data contains information about program execution, including:</p> <ul> <li>CPU Time: How much CPU time is spent in different functions</li> <li>Memory Allocation: How much memory is allocated by different parts of the code</li> <li>Call Stacks: The sequence of function calls that led to a particular sample</li> <li>Metadata: Additional information like process names, thread names, and custom attributes</li> </ul>"},{"location":"getting-started/overview/#how-the-connector-works","title":"How the Connector Works","text":"<pre><code>graph LR\n    A[Profiling Data] --&gt; B[String Table Extraction]\n    B --&gt; C[Sample Processing]\n    C --&gt; D[CPU/Memory Detection]\n    D --&gt; E[Metric Generation]\n    E --&gt; F[Attribute Attachment]\n    F --&gt; G[Filtering]\n    G --&gt; H[OpenTelemetry Metrics]</code></pre>"},{"location":"getting-started/overview/#1-string-table-extraction","title":"1. String Table Extraction","text":"<p>The connector extracts attributes from the profiling data's string table using: - Literal values: Exact string matches - Regular expressions: Pattern-based extraction</p>"},{"location":"getting-started/overview/#2-sample-processing","title":"2. Sample Processing","text":"<p>Each sample in the profiling data is processed to: - Identify the sample type (CPU or Memory) - Extract relevant metrics - Apply filtering rules</p>"},{"location":"getting-started/overview/#3-metric-generation","title":"3. Metric Generation","text":"<p>The connector generates two types of metrics: - CPU Time Metrics: Based on CPU profiling samples - Memory Allocation Metrics: Based on memory profiling samples</p>"},{"location":"getting-started/overview/#4-attribute-attachment","title":"4. Attribute Attachment","text":"<p>Custom attributes are attached to metrics based on: - String table values - Process and thread information - User-defined extraction rules</p>"},{"location":"getting-started/overview/#5-filtering","title":"5. Filtering","text":"<p>Multiple levels of filtering are available: - Process Filtering: Filter by process name patterns - Thread Filtering: Filter by thread name patterns - Pattern Filtering: Filter by attribute patterns</p>"},{"location":"getting-started/overview/#supported-profiling-formats","title":"Supported Profiling Formats","text":"<p>The connector is designed to work with OpenTelemetry profiling data format, which includes:</p> <ul> <li>CPU Profiling: Function-level CPU time measurements</li> <li>Memory Profiling: Allocation and deallocation tracking</li> <li>Custom Profiling: User-defined profiling data</li> </ul>"},{"location":"getting-started/overview/#use-cases","title":"Use Cases","text":""},{"location":"getting-started/overview/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Track CPU usage by function</li> <li>Monitor memory allocation patterns</li> <li>Identify performance bottlenecks</li> </ul>"},{"location":"getting-started/overview/#resource-optimization","title":"Resource Optimization","text":"<ul> <li>Optimize CPU-intensive operations</li> <li>Reduce memory allocations</li> <li>Improve application efficiency</li> </ul>"},{"location":"getting-started/overview/#observability","title":"Observability","text":"<ul> <li>Integrate profiling data with metrics</li> <li>Create dashboards and alerts</li> <li>Correlate performance with business metrics</li> </ul>"},{"location":"getting-started/overview/#benefits","title":"Benefits","text":"<ul> <li>Generic Design: Works with any profiling data format</li> <li>Configurable: Highly customizable attribute extraction</li> <li>Filterable: Multiple filtering options for precise control</li> <li>Observable: Full integration with OpenTelemetry ecosystem</li> <li>Scalable: Designed for high-throughput environments</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with the ProfileToMetrics Connector in minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed</li> <li>Basic understanding of OpenTelemetry</li> </ul>"},{"location":"getting-started/quick-start/#step-1-create-configuration","title":"Step 1: Create Configuration","text":"<p>Create a <code>config.yaml</code> file:</p> <pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\nexporters:\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-run-the-collector","title":"Step 2: Run the Collector","text":"<pre><code># Pull the image\ndocker pull hrexed/otel-collector-profilemetrics:latest\n\n# Run the collector\ndocker run -p 4317:4317 -p 8888:8888 \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:latest\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-send-test-data","title":"Step 3: Send Test Data","text":"<p>In another terminal, send test profiling data:</p> <pre><code># Clone the repository\ngit clone https://github.com/henrikrexed/profiletoMetrics.git\ncd profiletoMetrics\n\n# Send test data\n./scripts/send-test-data.sh\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-verify-output","title":"Step 4: Verify Output","text":"<p>You should see debug output showing:</p> <pre><code>2024-01-15T10:30:00.000Z    info    ProfileToMetrics connector started\n2024-01-15T10:30:00.000Z    debug   Processing traces   {\"resource_spans_count\": 1, \"total_spans\": 1}\n2024-01-15T10:30:00.000Z    debug   Traces converted to metrics {\"input_spans\": 1, \"output_metrics\": 2}\n</code></pre>"},{"location":"getting-started/quick-start/#step-5-check-metrics","title":"Step 5: Check Metrics","text":"<p>Visit the metrics endpoint:</p> <pre><code>curl http://localhost:8888/metrics\n</code></pre> <p>You should see metrics like:</p> <pre><code># HELP cpu_time CPU time in seconds\n# TYPE cpu_time counter\ncpu_time{service_name=\"my-service\"} 0.123\n\n# HELP memory_allocation Memory allocation in bytes\n# TYPE memory_allocation counter\nmemory_allocation{service_name=\"my-service\"} 1024\n</code></pre>"},{"location":"getting-started/quick-start/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/quick-start/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n</code></pre>"},{"location":"getting-started/quick-start/#add-more-attributes","title":"Add More Attributes","text":"<pre><code>connectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n      - key: \"environment\"\n        value: \"production\"\n      - key: \"version\"\n        value: \"1.0.0\"\n</code></pre>"},{"location":"getting-started/quick-start/#filter-by-process","title":"Filter by Process","text":"<pre><code>connectors:\n  profiletometrics:\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n    thread_filter:\n      enabled: true\n      pattern: \"worker-.*\"\n</code></pre>"},{"location":"getting-started/quick-start/#kubernetes-quick-start","title":"Kubernetes Quick Start","text":""},{"location":"getting-started/quick-start/#1-apply-manifests","title":"1. Apply Manifests","text":"<pre><code>kubectl apply -f k8s/namespace.yaml\nkubectl apply -f k8s/rbac.yaml\nkubectl apply -f k8s/configmap.yaml\nkubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n</code></pre>"},{"location":"getting-started/quick-start/#2-check-status","title":"2. Check Status","text":"<pre><code>kubectl get pods -n otel-collector\nkubectl logs -n otel-collector deployment/otel-collector\n</code></pre>"},{"location":"getting-started/quick-start/#3-port-forward","title":"3. Port Forward","text":"<pre><code>kubectl port-forward -n otel-collector svc/otel-collector 4317:4317 8888:8888\n</code></pre>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/quick-start/#1-connection-refused","title":"1. Connection Refused","text":"<pre><code># Check if collector is running\ndocker ps | grep otel-collector\n\n# Check logs\ndocker logs &lt;container-id&gt;\n</code></pre>"},{"location":"getting-started/quick-start/#2-configuration-errors","title":"2. Configuration Errors","text":"<pre><code># Validate configuration\ndocker run --rm -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:latest --config=/etc/otelcol/config.yaml --dry-run\n</code></pre>"},{"location":"getting-started/quick-start/#3-no-metrics-generated","title":"3. No Metrics Generated","text":"<ul> <li>Check if profiling data is being sent</li> <li>Verify connector configuration</li> <li>Enable debug logging</li> </ul>"},{"location":"getting-started/quick-start/#debug-commands","title":"Debug Commands","text":"<pre><code># Check collector health\ncurl http://localhost:8888/\n\n# Check metrics\ncurl http://localhost:8888/metrics\n\n# Check logs with debug level\ndocker run -e OTEL_LOG_LEVEL=debug \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:latest\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Guide</li> <li>Docker Deployment</li> <li>Kubernetes Deployment</li> <li>Testing Guide</li> </ul>"},{"location":"testing/unit-tests/","title":"Unit Tests","text":"<p>This guide covers running and writing unit tests for the ProfileToMetrics Connector.</p>"},{"location":"testing/unit-tests/#running-tests","title":"Running Tests","text":""},{"location":"testing/unit-tests/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\ngo test ./...\n\n# Run tests with verbose output\ngo test -v ./...\n\n# Run tests with coverage\ngo test -cover ./...\n\n# Run tests with coverage report\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out -o coverage.html\n</code></pre>"},{"location":"testing/unit-tests/#using-makefile","title":"Using Makefile","text":"<pre><code># Run tests\nmake test\n\n# Run tests with coverage\nmake test-coverage\n\n# Run specific test package\nmake test PKG=pkg/profiletometrics\n\n# Run tests with race detection\nmake test-race\n</code></pre>"},{"location":"testing/unit-tests/#test-scripts","title":"Test Scripts","text":"<pre><code># Run all tests with coverage\n./run_tests.sh\n\n# Run specific test\ngo test -v ./pkg/profiletometrics -run TestConvertProfilesToMetrics\n</code></pre>"},{"location":"testing/unit-tests/#test-structure","title":"Test Structure","text":""},{"location":"testing/unit-tests/#package-organization","title":"Package Organization","text":"<pre><code>pkg/profiletometrics/\n\u251c\u2500\u2500 converter.go\n\u251c\u2500\u2500 converter_test.go\n\u251c\u2500\u2500 converter_connector.go\n\u251c\u2500\u2500 config.go\n\u2514\u2500\u2500 config_test.go\n</code></pre>"},{"location":"testing/unit-tests/#test-files","title":"Test Files","text":"<p>Each Go package should have corresponding test files:</p> <ul> <li><code>converter_test.go</code> - Tests for the converter logic</li> <li><code>config_test.go</code> - Tests for configuration validation</li> <li><code>connector_test.go</code> - Tests for the connector implementation</li> </ul>"},{"location":"testing/unit-tests/#writing-tests","title":"Writing Tests","text":""},{"location":"testing/unit-tests/#basic-test-structure","title":"Basic Test Structure","text":"<pre><code>package profiletometrics\n\nimport (\n    \"testing\"\n    \"github.com/stretchr/testify/assert\"\n    \"github.com/stretchr/testify/require\"\n)\n\nfunc TestConvertProfilesToMetrics(t *testing.T) {\n    // Arrange\n    config := ConverterConfig{\n        Metrics: MetricsConfig{\n            CPU: CPUMetricsConfig{\n                Enabled: true,\n                MetricName: \"cpu_time\",\n            },\n            Memory: MemoryMetricsConfig{\n                Enabled: true,\n                MetricName: \"memory_allocation\",\n            },\n        },\n    }\n\n    // Act\n    result, err := ConvertProfilesToMetrics(context.Background(), profiles)\n\n    // Assert\n    require.NoError(t, err)\n    assert.NotNil(t, result)\n    assert.Equal(t, 2, result.ResourceMetrics().Len())\n}\n</code></pre>"},{"location":"testing/unit-tests/#test-data","title":"Test Data","text":"<p>Use the provided test data in <code>testdata/profile_test_data.go</code>:</p> <pre><code>func TestWithTestData(t *testing.T) {\n    // Use test data\n    profiles := testdata.CreateTestProfiles()\n\n    // Test conversion\n    result, err := ConvertProfilesToMetrics(context.Background(), profiles)\n\n    require.NoError(t, err)\n    assert.NotNil(t, result)\n}\n</code></pre>"},{"location":"testing/unit-tests/#mocking","title":"Mocking","text":"<p>For testing external dependencies:</p> <pre><code>type MockConverter struct {\n    ConvertProfilesToMetricsFunc func(context.Context, pprofile.Profiles) (pmetric.Metrics, error)\n}\n\nfunc (m *MockConverter) ConvertProfilesToMetrics(ctx context.Context, profiles pprofile.Profiles) (pmetric.Metrics, error) {\n    if m.ConvertProfilesToMetricsFunc != nil {\n        return m.ConvertProfilesToMetricsFunc(ctx, profiles)\n    }\n    return pmetric.NewMetrics(), nil\n}\n\nfunc TestConnectorWithMock(t *testing.T) {\n    mockConverter := &amp;MockConverter{}\n    mockConverter.ConvertProfilesToMetricsFunc = func(ctx context.Context, profiles pprofile.Profiles) (pmetric.Metrics, error) {\n        // Mock implementation\n        return pmetric.NewMetrics(), nil\n    }\n\n    // Test with mock\n    connector := &amp;profileToMetricsConnector{\n        converter: mockConverter,\n    }\n\n    // Test logic\n}\n</code></pre>"},{"location":"testing/unit-tests/#test-categories","title":"Test Categories","text":""},{"location":"testing/unit-tests/#unit-tests_1","title":"Unit Tests","text":"<p>Test individual functions and methods:</p> <pre><code>func TestCalculateCPUTime(t *testing.T) {\n    tests := []struct {\n        name     string\n        samples  []pprofile.Sample\n        expected float64\n    }{\n        {\n            name:     \"empty samples\",\n            samples:  []pprofile.Sample{},\n            expected: 0.0,\n        },\n        {\n            name:     \"single sample\",\n            samples:  []pprofile.Sample{createTestSample()},\n            expected: 0.123,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            result := CalculateCPUTime(tt.samples)\n            assert.Equal(t, tt.expected, result)\n        })\n    }\n}\n</code></pre>"},{"location":"testing/unit-tests/#integration-tests","title":"Integration Tests","text":"<p>Test the complete flow:</p> <pre><code>func TestIntegration(t *testing.T) {\n    // Create test profiles\n    profiles := testdata.CreateTestProfiles()\n\n    // Create converter\n    converter := NewConverter(ConverterConfig{\n        Metrics: MetricsConfig{\n            CPU: CPUMetricsConfig{Enabled: true},\n            Memory: MemoryMetricsConfig{Enabled: true},\n        },\n    })\n\n    // Convert profiles\n    result, err := converter.ConvertProfilesToMetrics(context.Background(), profiles)\n\n    // Verify result\n    require.NoError(t, err)\n    assert.NotNil(t, result)\n\n    // Check metrics\n    resourceMetrics := result.ResourceMetrics()\n    assert.Equal(t, 1, resourceMetrics.Len())\n\n    scopeMetrics := resourceMetrics.At(0).ScopeMetrics()\n    assert.Equal(t, 1, scopeMetrics.Len())\n\n    metrics := scopeMetrics.At(0).Metrics()\n    assert.Equal(t, 2, metrics.Len()) // CPU + Memory\n}\n</code></pre>"},{"location":"testing/unit-tests/#configuration-tests","title":"Configuration Tests","text":"<p>Test configuration validation:</p> <pre><code>func TestConfigValidation(t *testing.T) {\n    tests := []struct {\n        name    string\n        config  MetricsConfig\n        wantErr bool\n    }{\n        {\n            name: \"valid config\",\n            config: MetricsConfig{\n                CPU: CPUMetricsConfig{Enabled: true},\n                Memory: MemoryMetricsConfig{Enabled: true},\n            },\n            wantErr: false,\n        },\n        {\n            name: \"no metrics enabled\",\n            config: MetricsConfig{\n                CPU: CPUMetricsConfig{Enabled: false},\n                Memory: MemoryMetricsConfig{Enabled: false},\n            },\n            wantErr: true,\n        },\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            err := tt.config.Validate()\n            if tt.wantErr {\n                assert.Error(t, err)\n            } else {\n                assert.NoError(t, err)\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"testing/unit-tests/#test-coverage","title":"Test Coverage","text":""},{"location":"testing/unit-tests/#coverage-goals","title":"Coverage Goals","text":"<ul> <li>Unit Tests: 80%+ coverage</li> <li>Integration Tests: 60%+ coverage</li> <li>Critical Paths: 100% coverage</li> </ul>"},{"location":"testing/unit-tests/#coverage-commands","title":"Coverage Commands","text":"<pre><code># Generate coverage report\ngo test -coverprofile=coverage.out ./...\n\n# View coverage in browser\ngo tool cover -html=coverage.out\n\n# Coverage by function\ngo tool cover -func=coverage.out\n\n# Coverage threshold check\ngo test -cover ./... | grep -E \"coverage: [0-9]+\\.[0-9]+%\"\n</code></pre>"},{"location":"testing/unit-tests/#coverage-analysis","title":"Coverage Analysis","text":"<pre><code># Check coverage for specific package\ngo test -cover ./pkg/profiletometrics\n\n# Coverage with race detection\ngo test -race -cover ./...\n\n# Coverage for specific test\ngo test -cover -run TestConvertProfilesToMetrics ./pkg/profiletometrics\n</code></pre>"},{"location":"testing/unit-tests/#test-data_1","title":"Test Data","text":""},{"location":"testing/unit-tests/#test-data-structure","title":"Test Data Structure","text":"<pre><code>// testdata/profile_test_data.go\nfunc CreateTestProfiles() pprofile.Profiles {\n    profiles := pprofile.NewProfiles()\n    resourceProfiles := profiles.ResourceProfiles()\n\n    // Add resource profile\n    resourceProfile := resourceProfiles.AppendEmpty()\n    resourceProfile.Resource().Attributes().PutStr(\"service.name\", \"test-service\")\n\n    // Add scope profile\n    scopeProfiles := resourceProfile.ScopeProfiles()\n    scopeProfile := scopeProfiles.AppendEmpty()\n    scopeProfile.Scope().SetName(\"test-scope\")\n\n    // Add profile\n    profile := scopeProfile.Profiles().AppendEmpty()\n    profile.SetStartTimeUnixNano(1000000000)\n    profile.SetEndTimeUnixNano(2000000000)\n\n    // Add samples\n    samples := profile.Samples()\n    sample := samples.AppendEmpty()\n    sample.SetValue(0.123)\n\n    return profiles\n}\n</code></pre>"},{"location":"testing/unit-tests/#test-data-variants","title":"Test Data Variants","text":"<pre><code>func CreateCPUTestProfiles() pprofile.Profiles {\n    // CPU-specific test data\n}\n\nfunc CreateMemoryTestProfiles() pprofile.Profiles {\n    // Memory-specific test data\n}\n\nfunc CreateFilteredTestProfiles() pprofile.Profiles {\n    // Test data with filtering scenarios\n}\n</code></pre>"},{"location":"testing/unit-tests/#performance-tests","title":"Performance Tests","text":""},{"location":"testing/unit-tests/#benchmark-tests","title":"Benchmark Tests","text":"<pre><code>func BenchmarkConvertProfilesToMetrics(b *testing.B) {\n    profiles := testdata.CreateTestProfiles()\n    converter := NewConverter(ConverterConfig{\n        Metrics: MetricsConfig{\n            CPU: CPUMetricsConfig{Enabled: true},\n            Memory: MemoryMetricsConfig{Enabled: true},\n        },\n    })\n\n    b.ResetTimer()\n    for i := 0; i &lt; b.N; i++ {\n        _, err := converter.ConvertProfilesToMetrics(context.Background(), profiles)\n        if err != nil {\n            b.Fatal(err)\n        }\n    }\n}\n</code></pre>"},{"location":"testing/unit-tests/#memory-tests","title":"Memory Tests","text":"<pre><code>func TestMemoryUsage(t *testing.T) {\n    var m1, m2 runtime.MemStats\n    runtime.GC()\n    runtime.ReadMemStats(&amp;m1)\n\n    // Perform operation\n    profiles := testdata.CreateTestProfiles()\n    converter := NewConverter(ConverterConfig{})\n    result, err := converter.ConvertProfilesToMetrics(context.Background(), profiles)\n\n    runtime.GC()\n    runtime.ReadMemStats(&amp;m2)\n\n    // Check memory usage\n    memoryUsed := m2.Alloc - m1.Alloc\n    assert.Less(t, memoryUsed, uint64(1024*1024)) // Less than 1MB\n}\n</code></pre>"},{"location":"testing/unit-tests/#test-utilities","title":"Test Utilities","text":""},{"location":"testing/unit-tests/#test-helpers","title":"Test Helpers","text":"<pre><code>func assertMetricsEqual(t *testing.T, expected, actual pmetric.Metrics) {\n    t.Helper()\n\n    expectedRM := expected.ResourceMetrics()\n    actualRM := actual.ResourceMetrics()\n\n    assert.Equal(t, expectedRM.Len(), actualRM.Len())\n\n    for i := 0; i &lt; expectedRM.Len(); i++ {\n        expectedScope := expectedRM.At(i).ScopeMetrics()\n        actualScope := actualRM.At(i).ScopeMetrics()\n\n        assert.Equal(t, expectedScope.Len(), actualScope.Len())\n    }\n}\n\nfunc createTestSample() pprofile.Sample {\n    sample := pprofile.NewSample()\n    sample.SetValue(0.123)\n    return sample\n}\n</code></pre>"},{"location":"testing/unit-tests/#test-fixtures","title":"Test Fixtures","text":"<pre><code>func loadTestConfig(t *testing.T, filename string) ConverterConfig {\n    t.Helper()\n\n    data, err := os.ReadFile(filename)\n    require.NoError(t, err)\n\n    var config ConverterConfig\n    err = yaml.Unmarshal(data, &amp;config)\n    require.NoError(t, err)\n\n    return config\n}\n</code></pre>"},{"location":"testing/unit-tests/#continuous-integration","title":"Continuous Integration","text":""},{"location":"testing/unit-tests/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Tests\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v3\n        with:\n          go-version: '1.23'\n      - name: Run tests\n        run: make test\n      - name: Run tests with coverage\n        run: make test-coverage\n</code></pre>"},{"location":"testing/unit-tests/#test-reports","title":"Test Reports","text":"<pre><code># Generate test report\ngo test -json ./... &gt; test-results.json\n\n# Generate coverage report\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out -o coverage.html\n</code></pre>"},{"location":"testing/unit-tests/#troubleshooting-tests","title":"Troubleshooting Tests","text":""},{"location":"testing/unit-tests/#common-issues","title":"Common Issues","text":""},{"location":"testing/unit-tests/#1-test-timeouts","title":"1. Test Timeouts","text":"<pre><code>func TestWithTimeout(t *testing.T) {\n    ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n    defer cancel()\n\n    // Test with timeout\n    result, err := ConvertProfilesToMetrics(ctx, profiles)\n    require.NoError(t, err)\n    assert.NotNil(t, result)\n}\n</code></pre>"},{"location":"testing/unit-tests/#2-race-conditions","title":"2. Race Conditions","text":"<pre><code># Run tests with race detection\ngo test -race ./...\n\n# Run specific test with race detection\ngo test -race -run TestConcurrentAccess ./pkg/profiletometrics\n</code></pre>"},{"location":"testing/unit-tests/#3-memory-leaks","title":"3. Memory Leaks","text":"<pre><code>func TestMemoryLeak(t *testing.T) {\n    var m1, m2 runtime.MemStats\n    runtime.GC()\n    runtime.ReadMemStats(&amp;m1)\n\n    // Perform operation multiple times\n    for i := 0; i &lt; 1000; i++ {\n        profiles := testdata.CreateTestProfiles()\n        converter := NewConverter(ConverterConfig{})\n        result, err := converter.ConvertProfilesToMetrics(context.Background(), profiles)\n        require.NoError(t, err)\n        assert.NotNil(t, result)\n    }\n\n    runtime.GC()\n    runtime.ReadMemStats(&amp;m2)\n\n    // Check for memory leaks\n    memoryGrowth := m2.Alloc - m1.Alloc\n    assert.Less(t, memoryGrowth, uint64(1024*1024)) // Less than 1MB growth\n}\n</code></pre>"}]}