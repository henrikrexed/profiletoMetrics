{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ProfileToMetrics Connector","text":"<ul> <li> <p> CPU Metrics</p> <p>Convert CPU profiling data into OpenTelemetry metrics for performance monitoring</p> <p> CPU Metrics</p> </li> <li> <p> Memory Metrics</p> <p>Transform memory allocation profiles into actionable metrics</p> <p> Memory Metrics</p> </li> <li> <p> Advanced Filtering</p> <p>Filter by process, thread, and pattern matching for precise metric generation</p> <p> Filtering</p> </li> <li> <p> Easy Deployment</p> <p>Deploy with Docker or Kubernetes using provided manifests</p> <p> Deployment</p> </li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>The ProfileToMetrics Connector is an OpenTelemetry Collector connector that converts profiling data into metrics. It's designed to be generic and configurable, allowing users to define the types of attributes to attach to metrics and extract data from the profiling string table using literal values or regular expressions.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd04 Generic Profile Processing: Convert any profiling data format into OpenTelemetry metrics</li> <li>\u26a1 CPU &amp; Memory Metrics: Generate CPU time and memory allocation metrics</li> <li>\ud83c\udfaf Flexible Filtering: Filter by process, thread, and pattern matching</li> <li>\ud83c\udff7\ufe0f Attribute Extraction: Extract attributes from string table using regex or literals</li> <li>\ud83d\udc33 Docker Ready: Pre-built Docker images with multi-platform support</li> <li>\u2638\ufe0f Kubernetes Native: Complete K8s deployment manifests</li> <li>\ud83d\udd0d Debug Logging: Comprehensive debug logging for troubleshooting</li> <li>\ud83e\uddea Test Coverage: Unit and integration tests included</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<pre><code>graph TB\n    A[Profiling Data] --&gt; B[ProfileToMetrics Connector]\n    B --&gt; C[CPU Metrics]\n    B --&gt; D[Memory Metrics]\n    C --&gt; E[OpenTelemetry Metrics]\n    D --&gt; E\n    E --&gt; F[OTLP Exporter]\n    E --&gt; G[Debug Exporter]\n    F --&gt; H[Observability Platform]\n    G --&gt; I[Console Output]</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>\u26a0\ufe0f Important: The ProfileToMetrics connector requires the <code>+service.profilesSupport</code> feature gate to be enabled.</p>"},{"location":"#1-using-docker","title":"1. Using Docker","text":"<pre><code># Pull the image\ndocker pull hrexed/otel-collector-profilemetrics:0.1.0\n\n# Run with configuration and feature gate\ndocker run -p 4317:4317 -p 8888:8888 \\\n  --feature-gates=+service.profilesSupport \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"#2-using-kubernetes","title":"2. Using Kubernetes","text":"<pre><code># Apply the manifests\nkubectl apply -f k8s/namespace.yaml\nkubectl apply -f k8s/rbac.yaml\nkubectl apply -f k8s/configmap.yaml\nkubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n</code></pre>"},{"location":"#3-configuration-example","title":"3. Configuration Example","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\nexporters:\n  debug:\n    verbosity: detailed\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug, otlp]\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started - Overview, installation, and quick start</li> <li>Configuration - Detailed configuration options</li> <li>Deployment - Docker and Kubernetes deployment</li> <li>Testing - Testing strategies and examples</li> <li>Development - Architecture and contributing guide</li> <li>API Reference - Complete API documentation</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Documentation: This site</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache License 2.0 - see the LICENSE file for details.</p>"},{"location":"api/connector-api/","title":"Connector API Reference","text":"<p>This document provides a comprehensive reference for the ProfileToMetrics Connector configuration and usage.</p>"},{"location":"api/connector-api/#overview","title":"Overview","text":"<p>The ProfileToMetrics connector converts OpenTelemetry profiling data into metrics. It extracts attributes from the profile's string table and applies configurable filters to generate CPU and memory metrics.</p>"},{"location":"api/connector-api/#configuration-reference","title":"Configuration Reference","text":""},{"location":"api/connector-api/#basic-configuration","title":"Basic Configuration","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n        description: \"CPU time from profiling data\"\n        unit: \"ns\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n        description: \"Memory allocation from profiling data\"\n        unit: \"bytes\"\n    attributes:\n      - name: \"service.name\"\n        value: \"my-service\"\n        type: \"literal\"\n      - name: \"process.name\"\n        value: \"main\"\n        type: \"literal\"\n      - name: \"function.name\"\n        value: \".*\"\n        type: \"regex\"\n</code></pre>"},{"location":"api/connector-api/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"application_cpu_time\"\n        description: \"Application CPU time\"\n        unit: \"s\"\n      memory:\n        enabled: true\n        metric_name: \"application_memory_allocation\"\n        description: \"Application memory allocation\"\n        unit: \"bytes\"\n    attributes:\n      - name: \"service.name\"\n        value: \"my-service\"\n        type: \"literal\"\n      - name: \"environment\"\n        value: \"production\"\n        type: \"literal\"\n      - name: \"function.name\"\n        value: \".*\"\n        type: \"regex\"\n      - name: \"thread.name\"\n        value: \"worker-.*\"\n        type: \"regex\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n    thread_filter:\n      enabled: true\n      pattern: \"worker-.*\"\n    pattern_filter:\n      enabled: true\n      pattern: \"production.*\"\n</code></pre>"},{"location":"api/connector-api/#configuration-options","title":"Configuration Options","text":""},{"location":"api/connector-api/#metrics-configuration","title":"Metrics Configuration","text":""},{"location":"api/connector-api/#cpu-metrics","title":"CPU Metrics","text":"<ul> <li>enabled: Enable/disable CPU metrics generation</li> <li>metric_name: Name of the generated metric (default: \"cpu_time\")</li> <li>description: Description of the metric</li> <li>unit: Unit of measurement (default: \"ns\")</li> </ul>"},{"location":"api/connector-api/#memory-metrics","title":"Memory Metrics","text":"<ul> <li>enabled: Enable/disable memory metrics generation</li> <li>metric_name: Name of the generated metric (default: \"memory_allocation\")</li> <li>description: Description of the metric</li> <li>unit: Unit of measurement (default: \"bytes\")</li> </ul>"},{"location":"api/connector-api/#attribute-configuration","title":"Attribute Configuration","text":""},{"location":"api/connector-api/#attribute-types","title":"Attribute Types","text":"<ul> <li>literal: Direct string value</li> <li>regex: Regular expression pattern matching</li> <li>string_table: Direct string table index access</li> </ul>"},{"location":"api/connector-api/#attribute-examples","title":"Attribute Examples","text":"<pre><code>attributes:\n  # Literal value\n  - name: \"service.name\"\n    value: \"my-service\"\n    type: \"literal\"\n\n  # Regex pattern\n  - name: \"function.name\"\n    value: \".*worker.*\"\n    type: \"regex\"\n\n  # String table index\n  - name: \"thread.name\"\n    value: \"0\"\n    type: \"string_table\"\n</code></pre>"},{"location":"api/connector-api/#filter-configuration","title":"Filter Configuration","text":""},{"location":"api/connector-api/#process-filter","title":"Process Filter","text":"<p>Filter profiles based on process names:</p> <pre><code>process_filter:\n  enabled: true\n  pattern: \"my-app.*\"  # Regex pattern\n</code></pre>"},{"location":"api/connector-api/#thread-filter","title":"Thread Filter","text":"<p>Filter profiles based on thread names:</p> <pre><code>thread_filter:\n  enabled: true\n  pattern: \"worker-.*\"  # Regex pattern\n</code></pre>"},{"location":"api/connector-api/#pattern-filter","title":"Pattern Filter","text":"<p>Filter profiles based on attribute values:</p> <pre><code>pattern_filter:\n  enabled: true\n  pattern: \"production.*\"  # Regex pattern\n</code></pre>"},{"location":"api/connector-api/#feature-gates","title":"Feature Gates","text":"<p>\u26a0\ufe0f Important: The ProfileToMetrics connector requires the <code>+service.profilesSupport</code> feature gate to be enabled:</p> <pre><code># Command line\notelcol --feature-gates=+service.profilesSupport\n\n# Docker\ndocker run --feature-gates=+service.profilesSupport otelcol\n\n# Kubernetes (see deployment section)\n</code></pre>"},{"location":"api/connector-api/#pipeline-configuration","title":"Pipeline Configuration","text":"<p>The connector works with the profiles pipeline to convert profiling data to metrics:</p> <pre><code>service:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug, otlp]\n</code></pre>"},{"location":"api/connector-api/#generated-metrics","title":"Generated Metrics","text":""},{"location":"api/connector-api/#cpu-metrics_1","title":"CPU Metrics","text":"<ul> <li>Name: Configurable (default: \"cpu_time\")</li> <li>Type: Cumulative sum metric</li> <li>Unit: Time unit (default: \"ns\")</li> <li>Attributes: Extracted from string table and resource attributes</li> </ul>"},{"location":"api/connector-api/#memory-metrics_1","title":"Memory Metrics","text":"<ul> <li>Name: Configurable (default: \"memory_allocation\")</li> <li>Type: Cumulative sum metric</li> <li>Unit: Memory unit (default: \"bytes\")</li> <li>Attributes: Extracted from string table and resource attributes</li> </ul>"},{"location":"api/connector-api/#error-handling","title":"Error Handling","text":"<p>The connector provides comprehensive error handling:</p> <ul> <li>Configuration Errors: Invalid configuration settings</li> <li>Data Errors: Invalid or malformed profiling data</li> <li>Metric Generation Errors: Failures in metric creation</li> <li>Filter Errors: Invalid regex patterns in filters</li> </ul>"},{"location":"api/connector-api/#logging","title":"Logging","text":"<p>The connector provides structured logging:</p> <ul> <li>Input Statistics: Number of profiles and samples processed</li> <li>Processing Status: Debug information about conversion process</li> <li>Output Statistics: Number of metrics generated</li> <li>Error Context: Detailed error information for troubleshooting</li> </ul>"},{"location":"api/connector-api/#performance","title":"Performance","text":"<p>The connector is optimized for performance:</p> <ul> <li>Attribute Caching: Caches frequently accessed string table attributes</li> <li>Pattern Caching: Caches compiled regex patterns for filters</li> <li>Batch Processing: Efficient processing of multiple profiles</li> <li>Memory Management: Optimized memory usage for large datasets</li> </ul>"},{"location":"api/connector-api/#examples","title":"Examples","text":""},{"location":"api/connector-api/#basic-usage","title":"Basic Usage","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n      memory:\n        enabled: true\n</code></pre>"},{"location":"api/connector-api/#advanced-usage-with-filtering","title":"Advanced Usage with Filtering","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"application_cpu_time\"\n        unit: \"s\"\n      memory:\n        enabled: true\n        metric_name: \"application_memory_allocation\"\n        unit: \"bytes\"\n    attributes:\n      - name: \"service.name\"\n        value: \"my-service\"\n        type: \"literal\"\n      - name: \"function.name\"\n        value: \".*\"\n        type: \"regex\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n    thread_filter:\n      enabled: true\n      pattern: \"worker-.*\"\n</code></pre>"},{"location":"api/connector-api/#complete-collector-configuration","title":"Complete Collector Configuration","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n        unit: \"ns\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n        unit: \"bytes\"\n    attributes:\n      - name: \"service.name\"\n        value: \"my-service\"\n        type: \"literal\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\nexporters:\n  debug:\n    verbosity: detailed\n  otlp:\n    endpoint: http://localhost:4318\n\nservice:\n  pipelines:\n    profiles:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      processors: [batch]\n      exporters: [debug, otlp]\n</code></pre>"},{"location":"configuration/collector-config/","title":"Collector Configuration","text":"<p>This guide covers configuring the OpenTelemetry Collector with the ProfileToMetrics connector.</p>"},{"location":"configuration/collector-config/#basic-collector-setup","title":"Basic Collector Setup","text":""},{"location":"configuration/collector-config/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n      memory:\n        enabled: true\n\nexporters:\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\n</code></pre>"},{"location":"configuration/collector-config/#receivers","title":"Receivers","text":""},{"location":"configuration/collector-config/#otlp-receiver","title":"OTLP Receiver","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n        max_recv_msg_size: 4194304\n        max_concurrent_streams: 16\n      http:\n        endpoint: 0.0.0.0:4318\n        max_request_body_size: 4194304\n</code></pre>"},{"location":"configuration/collector-config/#prometheus-receiver","title":"Prometheus Receiver","text":"<pre><code>receivers:\n  prometheus:\n    config:\n      scrape_configs:\n        - job_name: 'otel-collector'\n          scrape_interval: 10s\n          static_configs:\n            - targets: ['localhost:8888']\n</code></pre>"},{"location":"configuration/collector-config/#connectors","title":"Connectors","text":""},{"location":"configuration/collector-config/#profiletometrics-connector","title":"ProfileToMetrics Connector","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n</code></pre>"},{"location":"configuration/collector-config/#processors","title":"Processors","text":""},{"location":"configuration/collector-config/#batch-processor","title":"Batch Processor","text":"<pre><code>processors:\n  batch:\n    timeout: 1s\n    send_batch_size: 1024\n    send_batch_max_size: 2048\n</code></pre>"},{"location":"configuration/collector-config/#resource-processor","title":"Resource Processor","text":"<pre><code>processors:\n  resource:\n    attributes:\n      - key: \"deployment.environment\"\n        value: \"production\"\n        action: \"upsert\"\n      - key: \"service.name\"\n        from_attribute: \"service.name\"\n        action: \"upsert\"\n</code></pre>"},{"location":"configuration/collector-config/#filter-processor","title":"Filter Processor","text":"<pre><code>processors:\n  filter:\n    traces:\n      span:\n        - 'attributes[\"http.method\"] == \"GET\"'\n    metrics:\n      metric:\n        - 'name == \"cpu_time\"'\n</code></pre>"},{"location":"configuration/collector-config/#transform-processor","title":"Transform Processor","text":"<pre><code>processors:\n  transform:\n    trace_statements:\n      - context: \"span\"\n        statements:\n          - set(attributes[\"processed\"], true)\n    metric_statements:\n      - context: \"metric\"\n        statements:\n          - set(attributes[\"source\"], \"profiletometrics\")\n</code></pre>"},{"location":"configuration/collector-config/#exporters","title":"Exporters","text":""},{"location":"configuration/collector-config/#debug-exporter","title":"Debug Exporter","text":"<pre><code>exporters:\n  debug:\n    verbosity: detailed\n    sampling_initial: 2\n    sampling_thereafter: 500\n</code></pre>"},{"location":"configuration/collector-config/#otlp-exporter","title":"OTLP Exporter","text":"<pre><code>exporters:\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n    tls:\n      insecure: true\n    compression: gzip\n    timeout: 30s\n    retry_on_failure:\n      enabled: true\n      initial_interval: 5s\n      max_interval: 30s\n      max_elapsed_time: 300s\n</code></pre>"},{"location":"configuration/collector-config/#prometheus-exporter","title":"Prometheus Exporter","text":"<pre><code>exporters:\n  prometheus:\n    endpoint: \"0.0.0.0:8889\"\n    namespace: \"otel\"\n    const_labels:\n      service: \"profiletometrics\"\n</code></pre>"},{"location":"configuration/collector-config/#service-configuration","title":"Service Configuration","text":""},{"location":"configuration/collector-config/#pipelines","title":"Pipelines","text":"<pre><code>service:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch, resource, filter]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      processors: [batch, resource, transform]\n      exporters: [debug, otlp, prometheus]\n    logs:\n      receivers: [otlp]\n      processors: [batch, resource]\n      exporters: [debug, otlp]\n</code></pre>"},{"location":"configuration/collector-config/#telemetry","title":"Telemetry","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n    metrics:\n      level: detailed\n      address: 0.0.0.0:8888\n    traces:\n      level: detailed\n      address: 0.0.0.0:8888\n</code></pre>"},{"location":"configuration/collector-config/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\nprocessors:\n  batch:\n    timeout: 1s\n    send_batch_size: 1024\n  resource:\n    attributes:\n      - key: \"deployment.environment\"\n        value: \"production\"\n        action: \"upsert\"\n  filter:\n    metrics:\n      metric:\n        - 'name == \"cpu_time\"'\n        - 'name == \"memory_allocation\"'\n\nexporters:\n  debug:\n    verbosity: detailed\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n    tls:\n      insecure: true\n  prometheus:\n    endpoint: \"0.0.0.0:8889\"\n    namespace: \"otel\"\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch, resource]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      processors: [batch, resource, filter]\n      exporters: [debug, otlp, prometheus]\n\n  telemetry:\n    logs:\n      level: debug\n      development: true\n    metrics:\n      level: detailed\n      address: 0.0.0.0:8888\n</code></pre>"},{"location":"configuration/collector-config/#environment-specific-configurations","title":"Environment-Specific Configurations","text":""},{"location":"configuration/collector-config/#development","title":"Development","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n\nexporters:\n  debug:\n    verbosity: detailed\n</code></pre>"},{"location":"configuration/collector-config/#production","title":"Production","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: info\n      development: false\n\nexporters:\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n    tls:\n      insecure: false\n    compression: gzip\n</code></pre>"},{"location":"configuration/collector-config/#kubernetes","title":"Kubernetes","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    attributes:\n      - key: \"k8s.namespace\"\n        value: \"default\"\n      - key: \"k8s.pod.name\"\n        value: \"pod-.*\"\n      - key: \"k8s.container.name\"\n        value: \"container-.*\"\n\nprocessors:\n  k8sattributes:\n    auth_type: \"serviceAccount\"\n    passthrough: false\n    filter:\n      node_from_env_var: \"KUBE_NODE_NAME\"\n</code></pre>"},{"location":"configuration/collector-config/#configuration-validation","title":"Configuration Validation","text":""},{"location":"configuration/collector-config/#command-line-validation","title":"Command Line Validation","text":"<pre><code># Validate configuration\notelcol --config config.yaml --dry-run\n\n# Check configuration syntax\notelcol --config config.yaml --check-config\n</code></pre>"},{"location":"configuration/collector-config/#common-validation-errors","title":"Common Validation Errors","text":""},{"location":"configuration/collector-config/#1-invalid-pipeline-configuration","title":"1. Invalid Pipeline Configuration","text":"<pre><code># \u274c Invalid - missing receivers\nservice:\n  pipelines:\n    metrics:\n      exporters: [debug]\n\n# \u2705 Valid - includes receivers\nservice:\n  pipelines:\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\n</code></pre>"},{"location":"configuration/collector-config/#2-invalid-connector-usage","title":"2. Invalid Connector Usage","text":"<pre><code># \u274c Invalid - connector in wrong pipeline\nservice:\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n\n# \u2705 Valid - connector in traces pipeline\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\n</code></pre>"},{"location":"configuration/collector-config/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/collector-config/#debug-configuration","title":"Debug Configuration","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n    metrics:\n      level: detailed\n      address: 0.0.0.0:8888\n</code></pre>"},{"location":"configuration/collector-config/#health-checks","title":"Health Checks","text":"<pre><code># Check collector health\ncurl http://localhost:8888/\n\n# Check metrics\ncurl http://localhost:8888/metrics\n\n# Check configuration\ncurl http://localhost:8888/config\n</code></pre>"},{"location":"configuration/collector-config/#log-analysis","title":"Log Analysis","text":"<pre><code># Check logs for errors\ndocker logs &lt;container-id&gt; | grep ERROR\n\n# Check debug logs\ndocker logs &lt;container-id&gt; | grep DEBUG\n\n# Check connector logs\ndocker logs &lt;container-id&gt; | grep profiletometrics\n</code></pre>"},{"location":"configuration/connector-config/","title":"Connector Configuration","text":"<p>The ProfileToMetrics connector supports comprehensive configuration options for metrics generation, attribute extraction, and filtering.</p>"},{"location":"configuration/connector-config/#feature-gates","title":"Feature Gates","text":"<p>\u26a0\ufe0f Important: The ProfileToMetrics connector requires the <code>+service.profilesSupport</code> feature gate to be enabled:</p> <pre><code># Command line\notelcol --feature-gates=+service.profilesSupport\n\n# Docker\ndocker run --feature-gates=+service.profilesSupport otelcol\n\n# Kubernetes (see deployment section)\n</code></pre>"},{"location":"configuration/connector-config/#basic-configuration","title":"Basic Configuration","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n</code></pre>"},{"location":"configuration/connector-config/#configuration-reference","title":"Configuration Reference","text":""},{"location":"configuration/connector-config/#metrics-configuration","title":"Metrics Configuration","text":""},{"location":"configuration/connector-config/#cpu-metrics","title":"CPU Metrics","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true                    # Enable CPU metrics\n        metric_name: \"cpu_time\"         # Metric name\n        description: \"CPU time in seconds\" # Metric description\n        unit: \"s\"                       # Metric unit\n</code></pre>"},{"location":"configuration/connector-config/#memory-metrics","title":"Memory Metrics","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      memory:\n        enabled: true                   # Enable memory metrics\n        metric_name: \"memory_allocation\" # Metric name\n        description: \"Memory allocation in bytes\" # Metric description\n        unit: \"bytes\"                   # Metric unit\n</code></pre>"},{"location":"configuration/connector-config/#function-metrics","title":"Function Metrics","text":"<p>Control whether to generate per-function metrics:</p> <pre><code>connectors:\n  profiletometrics:\n    metrics:\n      function:\n        enabled: true                   # Enable function-level metrics (default: true)\n</code></pre> <p>Function Metrics Behavior:</p> <p>When <code>function.enabled</code> is set to <code>true</code>, the connector generates metrics with function names as attributes rather than creating separate metrics for each function. This approach significantly reduces metric cardinality while still providing per-function visibility.</p> <p>Generated Metrics:</p> <ol> <li>CPU Time Per Function:</li> <li>Metric: <code>cpu_time</code> (uses base metric name)</li> <li>Attributes: <code>function.name=\"&lt;function_name&gt;\"</code></li> <li> <p>Example: <code>cpu_time{function.name=\"main\"}</code></p> </li> <li> <p>Memory Allocation Per Function:</p> </li> <li>Metric: <code>memory_allocation</code> (uses base metric name)</li> <li>Attributes: <code>function.name=\"&lt;function_name&gt;\"</code></li> <li>Example: <code>memory_allocation{function.name=\"handler\"}</code></li> </ol> <p>Function Name Extraction:</p> <p>Function names are automatically extracted from profile stack traces: - The connector traverses the profile's location, mapping, and function tables - Each stack trace sample is analyzed to identify the called functions - Function names are resolved from the profile's string table</p> <p>Cardinality Considerations:</p> <ul> <li>Low Cardinality: All functions share the same base metrics (<code>cpu_time</code> and <code>memory_allocation</code>)</li> <li>The <code>function.name</code> attribute value determines the number of distinct time series</li> <li>A profile with 100 unique functions creates 200 time series (2 metrics \u00d7 100 functions)</li> </ul> <p>Benefits:</p> <ul> <li>\u2705 Reduced metric cardinality compared to per-function metrics</li> <li>\u2705 Consistent metric structure for easier querying</li> <li>\u2705 Automatic function discovery from stack traces</li> <li>\u2705 Can be disabled to reduce cardinality if not needed</li> </ul> <p>Note: Function-level metrics are automatically extracted from profile stack traces. When enabled, they can increase metric cardinality based on the number of unique functions in your profiles. Disable this feature if you don't need function-level visibility.</p>"},{"location":"configuration/connector-config/#attribute-configuration","title":"Attribute Configuration","text":"<p>Extract attributes from the profiling data's string table.</p>"},{"location":"configuration/connector-config/#literal-values","title":"Literal Values","text":"<pre><code>connectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"            # Literal value\n      - key: \"environment\"\n        value: \"production\"\n</code></pre>"},{"location":"configuration/connector-config/#regular-expressions","title":"Regular Expressions","text":"<pre><code>connectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"service-.*\"           # Regex pattern\n      - key: \"version\"\n        value: \"v[0-9]+\\\\.[0-9]+\"      # Version pattern\n</code></pre>"},{"location":"configuration/connector-config/#filtering-configuration","title":"Filtering Configuration","text":""},{"location":"configuration/connector-config/#process-filtering","title":"Process Filtering","text":"<p>Filter metrics based on process names:</p> <pre><code>connectors:\n  profiletometrics:\n    process_filter:\n      enabled: true                     # Enable process filtering\n      pattern: \"my-app.*\"              # Regex pattern for process names\n</code></pre>"},{"location":"configuration/connector-config/#pattern-filtering","title":"Pattern Filtering","text":"<p>Filter metrics based on attribute patterns:</p> <pre><code>connectors:\n  profiletometrics:\n    pattern_filter:\n      enabled: true                    # Enable pattern filtering\n      pattern: \"service-.*\"           # Regex pattern for attributes\n</code></pre>"},{"location":"configuration/connector-config/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nconnectors:\n  profiletometrics:\n    # Metrics configuration\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n        description: \"CPU time in seconds\"\n        unit: \"s\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n        description: \"Memory allocation in bytes\"\n        unit: \"bytes\"\n      function:\n        enabled: true                   # Enable function-level metrics\n\n    # Attribute extraction\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n      - key: \"environment\"\n        value: \"production\"\n      - key: \"version\"\n        value: \"v[0-9]+\\\\.[0-9]+\"\n      - key: \"instance.id\"\n        value: \"instance-.*\"\n\n    # Filtering\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\n    pattern_filter:\n      enabled: true\n      pattern: \"service-.*\"\n\nexporters:\n  debug:\n    verbosity: detailed\n  otlp:\n    endpoint: \"http://observability-platform:4317\"\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug, otlp]\n\n  telemetry:\n    logs:\n      level: debug\n      development: true\n</code></pre>"},{"location":"configuration/connector-config/#configuration-validation","title":"Configuration Validation","text":""},{"location":"configuration/connector-config/#required-fields","title":"Required Fields","text":"<ul> <li><code>metrics.cpu.enabled</code> or <code>metrics.memory.enabled</code> must be <code>true</code></li> <li>At least one attribute must be configured</li> <li>Valid regex patterns for filters</li> </ul>"},{"location":"configuration/connector-config/#optional-fields","title":"Optional Fields","text":"<ul> <li><code>metrics.cpu.metric_name</code> (default: \"cpu_time\")</li> <li><code>metrics.memory.metric_name</code> (default: \"memory_allocation\")</li> <li>All filtering options are optional</li> </ul>"},{"location":"configuration/connector-config/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/connector-config/#multiple-attribute-rules","title":"Multiple Attribute Rules","text":"<pre><code>connectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n      - key: \"service.version\"\n        value: \"v[0-9]+\\\\.[0-9]+\"\n      - key: \"deployment.environment\"\n        value: \"production\"\n      - key: \"k8s.pod.name\"\n        value: \"pod-.*\"\n</code></pre>"},{"location":"configuration/connector-config/#complex-filtering","title":"Complex Filtering","text":"<pre><code>connectors:\n  profiletometrics:\n    process_filter:\n      enabled: true\n      pattern: \"(my-app|worker|scheduler).*\"\n\n    thread_filter:\n      enabled: true\n      pattern: \"(main|worker|background)-.*\"\n\n    pattern_filter:\n      enabled: true\n      pattern: \"(service|deployment|k8s)-.*\"\n</code></pre>"},{"location":"configuration/connector-config/#debug-configuration","title":"Debug Configuration","text":"<pre><code>connectors:\n  profiletometrics:\n    # ... other configuration ...\n\n    # Enable debug logging\n    debug:\n      enabled: true\n      log_level: \"debug\"\n      log_samples: true\n      log_attributes: true\n</code></pre>"},{"location":"configuration/connector-config/#querying-function-metrics","title":"Querying Function Metrics","text":"<p>When function metrics are enabled, you can query them using the <code>function.name</code> attribute:</p>"},{"location":"configuration/connector-config/#promql-examples","title":"PromQL Examples","text":"<p>Total CPU time by function: <pre><code>sum by (function.name) (cpu_time{function.name!=\"\"})\n</code></pre></p> <p>Top 10 functions by CPU time: <pre><code>topk(10, sum by (function.name) (rate(cpu_time{function.name!=\"\"}[5m])))\n</code></pre></p> <p>Total memory allocation per function: <pre><code>sum by (function.name) (memory_allocation{function.name!=\"\"})\n</code></pre></p> <p>Functions with highest memory usage: <pre><code>topk(5, sum by (function.name) (rate(memory_allocation{function.name!=\"\"}[5m])))\n</code></pre></p> <p>Filter specific function: <pre><code>cpu_time{function.name=\"myHandler\"}\n</code></pre></p> <p>Functions in a specific service: <pre><code>cpu_time{service.name=\"my-service\", function.name!=\"\"}\n</code></pre></p>"},{"location":"configuration/connector-config/#metrics-structure","title":"Metrics Structure","text":"<p>With function metrics enabled, your metric hierarchy looks like:</p> <pre><code>Total Metrics:\n\u251c\u2500\u2500 cpu_time                           # Overall CPU time\n\u251c\u2500\u2500 cpu_time{function.name=\"main\"}     # Per-function CPU (with function.name attribute)\n\u251c\u2500\u2500 cpu_time{function.name=\"handler\"}  # Per-function CPU (with function.name attribute)\n\u251c\u2500\u2500 memory_allocation                  # Overall memory\n\u251c\u2500\u2500 memory_allocation{function.name=\"main\"}     # Per-function memory (with function.name attribute)\n\u2514\u2500\u2500 memory_allocation{function.name=\"handler\"}  # Per-function memory (with function.name attribute)\n\nWith Attributes:\n\u251c\u2500\u2500 cpu_time{service.name=\"app\"}\n\u251c\u2500\u2500 cpu_time{service.name=\"app\", function.name=\"main\"}\n\u251c\u2500\u2500 cpu_time{service.name=\"app\", function.name=\"handler\"}\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"configuration/connector-config/#configuration-examples","title":"Configuration Examples","text":""},{"location":"configuration/connector-config/#simple-setup","title":"Simple Setup","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n      memory:\n        enabled: true\n      function:\n        enabled: false                  # Disable to reduce metric cardinality\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n</code></pre> <p>Note: In the simple setup example above, function-level metrics are disabled to reduce cardinality. Enable them if you need per-function metrics.</p>"},{"location":"configuration/connector-config/#production-setup","title":"Production Setup","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"application_cpu_time\"\n        description: \"Application CPU time\"\n        unit: \"s\"\n      memory:\n        enabled: true\n        metric_name: \"application_memory_allocation\"\n        description: \"Application memory allocation\"\n        unit: \"bytes\"\n      function:\n        enabled: true                   # Enable function-level metrics\n\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n      - key: \"service.version\"\n        value: \"v[0-9]+\\\\.[0-9]+\"\n      - key: \"deployment.environment\"\n        value: \"production\"\n      - key: \"k8s.namespace\"\n        value: \"default\"\n      - key: \"k8s.pod.name\"\n        value: \"pod-.*\"\n\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\n    thread_filter:\n      enabled: true\n      pattern: \"worker-.*\"\n</code></pre>"},{"location":"configuration/connector-config/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"configuration/connector-config/#common-issues","title":"Common Issues","text":""},{"location":"configuration/connector-config/#1-invalid-regex-patterns","title":"1. Invalid Regex Patterns","text":"<pre><code># \u274c Invalid - unescaped dots\npattern: \"service.*\"\n\n# \u2705 Valid - escaped dots\npattern: \"service\\\\..*\"\n</code></pre>"},{"location":"configuration/connector-config/#2-missing-required-fields","title":"2. Missing Required Fields","text":"<pre><code># \u274c Invalid - no metrics enabled\nconnectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n\n# \u2705 Valid - at least one metric enabled\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n</code></pre>"},{"location":"configuration/connector-config/#3-configuration-validation","title":"3. Configuration Validation","text":"<pre><code># Validate configuration\notelcol --config config.yaml --dry-run\n</code></pre>"},{"location":"configuration/connector-config/#debug-configuration_1","title":"Debug Configuration","text":"<p>Enable debug logging to troubleshoot configuration issues:</p> <pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n</code></pre>"},{"location":"deployment/docker/","title":"Docker Deployment","text":"<p>Deploy the ProfileToMetrics Connector using Docker containers.</p>"},{"location":"deployment/docker/#feature-gates","title":"Feature Gates","text":"<p>\u26a0\ufe0f Important: The ProfileToMetrics connector requires the <code>+service.profilesSupport</code> feature gate to be enabled:</p> <pre><code># Docker run with feature gate\ndocker run --feature-gates=+service.profilesSupport hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"deployment/docker/#quick-start","title":"Quick Start","text":""},{"location":"deployment/docker/#pull-and-run","title":"Pull and Run","text":"<pre><code># Pull the latest image\ndocker pull hrexed/otel-collector-profilemetrics:0.1.0\n\n# Run with basic configuration\ndocker run -p 4317:4317 -p 8888:8888 \\\n  --feature-gates=+service.profilesSupport \\\n  hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"deployment/docker/#with-configuration-file","title":"With Configuration File","text":"<pre><code># Create configuration file\ncat &gt; config.yaml &lt;&lt; EOF\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n      memory:\n        enabled: true\n\nexporters:\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    profiles:\n      receivers: [otlp]\n      exporters: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\nEOF\n\n# Run with configuration\ndocker run -p 4317:4317 -p 8888:8888 \\\n  --feature-gates=+service.profilesSupport \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"deployment/docker/#image-variants","title":"Image Variants","text":""},{"location":"deployment/docker/#latest-recommended","title":"Latest (Recommended)","text":"<pre><code>docker pull hrexed/otel-collector-profilemetrics:latest\n</code></pre>"},{"location":"deployment/docker/#specific-version","title":"Specific Version","text":"<pre><code>docker pull hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"deployment/docker/#multi-platform","title":"Multi-Platform","text":"<pre><code># AMD64\ndocker pull hrexed/otel-collector-profilemetrics:latest-amd64\n\n# ARM64\ndocker pull hrexed/otel-collector-profilemetrics:latest-arm64\n</code></pre>"},{"location":"deployment/docker/#configuration","title":"Configuration","text":""},{"location":"deployment/docker/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>OTEL_CONFIG</code> <code>/etc/otelcol/config.yaml</code> Path to configuration file <code>OTEL_LOG_LEVEL</code> <code>info</code> Log level (debug, info, warn, error) <code>OTEL_LOG_FORMAT</code> <code>json</code> Log format (json, console)"},{"location":"deployment/docker/#volume-mounts","title":"Volume Mounts","text":"<pre><code># Configuration file\n-v $(pwd)/config.yaml:/etc/otelcol/config.yaml\n\n# Logs directory\n-v $(pwd)/logs:/var/log/otelcol\n\n# Data directory\n-v $(pwd)/data:/var/lib/otelcol\n</code></pre>"},{"location":"deployment/docker/#port-mapping","title":"Port Mapping","text":"Container Port Host Port Description 4317 4317 OTLP gRPC receiver 4318 4318 OTLP HTTP receiver 8888 8888 Health check and metrics 8889 8889 Prometheus metrics (if enabled)"},{"location":"deployment/docker/#docker-compose","title":"Docker Compose","text":""},{"location":"deployment/docker/#basic-setup","title":"Basic Setup","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    environment:\n      - OTEL_LOG_LEVEL=debug\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#with-observability-platform","title":"With Observability Platform","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    environment:\n      - OTEL_LOG_LEVEL=info\n    depends_on:\n      - jaeger\n      - prometheus\n    restart: unless-stopped\n\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    ports:\n      - \"16686:16686\"\n    environment:\n      - COLLECTOR_OTLP_ENABLED=true\n    restart: unless-stopped\n\n  prometheus:\n    image: prom/prometheus:latest\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#production-deployment","title":"Production Deployment","text":""},{"location":"deployment/docker/#resource-limits","title":"Resource Limits","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    environment:\n      - OTEL_LOG_LEVEL=info\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 4G\n        reservations:\n          cpus: '1.0'\n          memory: 2G\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#health-checks","title":"Health Checks","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8888/\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#logging-configuration","title":"Logging Configuration","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"4317:4317\"\n      - \"4318:4318\"\n      - \"8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    environment:\n      - OTEL_LOG_LEVEL=info\n      - OTEL_LOG_FORMAT=json\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"10m\"\n        max-file: \"3\"\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#building-custom-images","title":"Building Custom Images","text":""},{"location":"deployment/docker/#build-from-source","title":"Build from Source","text":"<pre><code># Clone repository\ngit clone https://github.com/henrikrexed/profiletoMetrics.git\ncd profiletoMetrics\n\n# Build Docker image\nmake docker-build\n\n# Build with specific version\nmake docker-build VERSION=0.1.0\n</code></pre>"},{"location":"deployment/docker/#monitoring","title":"Monitoring","text":""},{"location":"deployment/docker/#metrics-endpoint","title":"Metrics Endpoint","text":"<pre><code># Prometheus metrics\ncurl http://localhost:8888/metrics\n\n# Health check\ncurl http://localhost:8888/\n</code></pre>"},{"location":"deployment/docker/#log-monitoring","title":"Log Monitoring","text":"<pre><code># Follow logs\ndocker logs -f &lt;container-id&gt;\n\n# Filter error logs\ndocker logs &lt;container-id&gt; | grep ERROR\n\n# Filter debug logs\ndocker logs &lt;container-id&gt; | grep DEBUG\n</code></pre>"},{"location":"deployment/docker/#security","title":"Security","text":""},{"location":"deployment/docker/#non-root-user","title":"Non-Root User","text":"<p>The container runs as a non-root user (<code>otelcol</code>) for security.</p>"},{"location":"deployment/docker/#network-security","title":"Network Security","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    ports:\n      - \"127.0.0.1:4317:4317\"  # Bind to localhost only\n      - \"127.0.0.1:4318:4318\"\n      - \"127.0.0.1:8888:8888\"\n    volumes:\n      - ./config.yaml:/etc/otelcol/config.yaml\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#tls-configuration","title":"TLS Configuration","text":"<pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n        tls:\n          cert_file: /etc/otelcol/tls/server.crt\n          key_file: /etc/otelcol/tls/server.key\n</code></pre>"},{"location":"deployment/docker/#performance-tuning","title":"Performance Tuning","text":""},{"location":"deployment/docker/#resource-allocation","title":"Resource Allocation","text":"<pre><code>version: '3.8'\n\nservices:\n  otel-collector:\n    image: hrexed/otel-collector-profilemetrics:latest\n    deploy:\n      resources:\n        limits:\n          cpus: '4.0'\n          memory: 8G\n        reservations:\n          cpus: '2.0'\n          memory: 4G\n    environment:\n      - GOMAXPROCS=4\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#batch-processing","title":"Batch Processing","text":"<pre><code>processors:\n  batch:\n    timeout: 1s\n    send_batch_size: 1024\n    send_batch_max_size: 2048\n</code></pre>"},{"location":"deployment/kubernetes/","title":"Kubernetes Deployment","text":"<p>Deploy the ProfileToMetrics Connector on Kubernetes using the provided manifests.</p>"},{"location":"deployment/kubernetes/#feature-gates","title":"Feature Gates","text":"<p>\u26a0\ufe0f Important: The ProfileToMetrics connector requires the <code>+service.profilesSupport</code> feature gate to be enabled. This is configured in the deployment manifest.</p>"},{"location":"deployment/kubernetes/#quick-start","title":"Quick Start","text":""},{"location":"deployment/kubernetes/#apply-all-manifests","title":"Apply All Manifests","text":"<pre><code># Create namespace\nkubectl apply -f k8s/namespace.yaml\n\n# Apply RBAC\nkubectl apply -f k8s/rbac.yaml\n\n# Apply configuration\nkubectl apply -f k8s/configmap.yaml\n\n# Deploy collector\nkubectl apply -f k8s/deployment.yaml\n\n# Create service\nkubectl apply -f k8s/service.yaml\n</code></pre>"},{"location":"deployment/kubernetes/#verify-deployment","title":"Verify Deployment","text":"<pre><code># Check pods\nkubectl get pods -n otel-collector\n\n# Check logs\nkubectl logs -n otel-collector deployment/otel-collector\n\n# Check service\nkubectl get svc -n otel-collector\n</code></pre>"},{"location":"deployment/kubernetes/#manifest-details","title":"Manifest Details","text":""},{"location":"deployment/kubernetes/#namespace","title":"Namespace","text":"<pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: otel-collector\n  labels:\n    name: otel-collector\n</code></pre>"},{"location":"deployment/kubernetes/#rbac","title":"RBAC","text":"<pre><code>apiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: otel-collector\n  namespace: otel-collector\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: otel-collector\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"nodes\", \"nodes/proxy\", \"nodes/stats\", \"nodes/metrics\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"pods\", \"services\", \"endpoints\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"namespaces\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: otel-collector\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: otel-collector\nsubjects:\n  - kind: ServiceAccount\n    name: otel-collector\n    namespace: otel-collector\n</code></pre>"},{"location":"deployment/kubernetes/#configmap","title":"ConfigMap","text":"<pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: otel-collector-config\n  namespace: otel-collector\ndata:\n  config.yaml: |\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n\n    connectors:\n      profiletometrics:\n        metrics:\n          cpu:\n            enabled: true\n            metric_name: \"cpu_time\"\n          memory:\n            enabled: true\n            metric_name: \"memory_allocation\"\n        attributes:\n          - key: \"k8s.namespace\"\n            value: \"otel-collector\"\n          - key: \"k8s.pod.name\"\n            value: \"pod-.*\"\n\n    exporters:\n      debug:\n        verbosity: detailed\n      otlp:\n        endpoint: \"http://observability-platform:4317\"\n\n    service:\n      pipelines:\n        profiles:\n          receivers: [otlp]\n          exporters: [profiletometrics]\n        metrics:\n          receivers: [profiletometrics]\n          exporters: [debug, otlp]\n</code></pre>"},{"location":"deployment/kubernetes/#deployment","title":"Deployment","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: otel-collector\n  namespace: otel-collector\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: otel-collector\n  template:\n    metadata:\n      labels:\n        app: otel-collector\n    spec:\n      serviceAccountName: otel-collector\n      containers:\n        - name: otel-collector\n          image: hrexed/otel-collector-profilemetrics:0.1.0\n          ports:\n            - containerPort: 4317\n              name: otlp-grpc\n            - containerPort: 4318\n              name: otlp-http\n            - containerPort: 8888\n              name: health-check\n          env:\n            - name: OTEL_LOG_LEVEL\n              value: \"info\"\n          volumeMounts:\n            - name: config\n              mountPath: /etc/otelcol\n          livenessProbe:\n            httpGet:\n              path: /\n              port: 8888\n            initialDelaySeconds: 30\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /\n              port: 8888\n            initialDelaySeconds: 5\n            periodSeconds: 5\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 1Gi\n            requests:\n              cpu: 500m\n              memory: 512Mi\n      volumes:\n        - name: config\n          configMap:\n            name: otel-collector-config\n</code></pre>"},{"location":"deployment/kubernetes/#service","title":"Service","text":"<pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: otel-collector\n  namespace: otel-collector\nspec:\n  selector:\n    app: otel-collector\n  ports:\n    - name: otlp-grpc\n      port: 4317\n      targetPort: 4317\n    - name: otlp-http\n      port: 4318\n      targetPort: 4318\n    - name: health-check\n      port: 8888\n      targetPort: 8888\n  type: ClusterIP\n</code></pre>"},{"location":"deployment/kubernetes/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/kubernetes/#common-issues","title":"Common Issues","text":""},{"location":"deployment/kubernetes/#1-pod-not-starting","title":"1. Pod Not Starting","text":"<pre><code># Check pod status\nkubectl get pods -n otel-collector\n\n# Check pod events\nkubectl describe pod -n otel-collector &lt;pod-name&gt;\n\n# Check logs\nkubectl logs -n otel-collector &lt;pod-name&gt;\n</code></pre>"},{"location":"development/architecture/","title":"Architecture","text":"<p>This document describes the architecture of the ProfileToMetrics Connector and its components.</p>"},{"location":"development/architecture/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    A[Profiling Data] --&gt; B[OpenTelemetry Collector]\n    B --&gt; C[ProfileToMetrics Connector]\n    C --&gt; D[String Table Extraction]\n    D --&gt; E[Sample Processing]\n    E --&gt; F[CPU/Memory Detection]\n    F --&gt; G[Metric Generation]\n    G --&gt; H[Attribute Attachment]\n    H --&gt; I[Filtering]\n    I --&gt; J[OpenTelemetry Metrics]\n    J --&gt; K[Exporters]\n    K --&gt; L[Observability Platform]</code></pre>"},{"location":"development/architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"development/architecture/#core-components","title":"Core Components","text":"<pre><code>graph LR\n    A[Connector Factory] --&gt; B[Connector Implementation]\n    B --&gt; C[Converter]\n    C --&gt; D[Configuration]\n    C --&gt; E[String Table Extractor]\n    C --&gt; F[Sample Processor]\n    C --&gt; G[Metric Generator]\n    C --&gt; H[Filter]</code></pre>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant Collector\n    participant Connector\n    participant Converter\n    participant Exporter\n\n    Client-&gt;&gt;Collector: Send Profiling Data\n    Collector-&gt;&gt;Connector: Process Profiles\n    Connector-&gt;&gt;Converter: Convert to Metrics\n    Converter-&gt;&gt;Converter: Extract Attributes\n    Converter-&gt;&gt;Converter: Process Samples\n    Converter-&gt;&gt;Converter: Generate Metrics\n    Converter-&gt;&gt;Connector: Return Metrics\n    Connector-&gt;&gt;Exporter: Send Metrics\n    Exporter-&gt;&gt;Client: Export Metrics</code></pre>"},{"location":"development/architecture/#profile-schema-and-string-table-extraction","title":"Profile Schema and String Table Extraction","text":"<p>The ProfileToMetrics connector extracts attributes from the OpenTelemetry profiling data structure. Understanding the profile schema is crucial for configuring attribute extraction and filtering.</p>"},{"location":"development/architecture/#profile-schema-diagram","title":"Profile Schema Diagram","text":"<pre><code>graph TD\n    A[Profiles] --&gt; B[ResourceProfiles]\n    B --&gt; C[Resource Attributes]\n    B --&gt; D[ScopeProfiles]\n    D --&gt; E[Scope Info]\n    D --&gt; F[Profiles Array]\n    F --&gt; G[Profile]\n    G --&gt; H[Sample Array]\n    G --&gt; I[String Table]\n    G --&gt; J[Attribute Table]\n\n    I --&gt; K[String Index 0: \"main\"]\n    I --&gt; L[String Index 1: \"worker-1\"]\n    I --&gt; M[String Index 2: \"my-service\"]\n    I --&gt; N[String Index 3: \"production\"]\n\n    J --&gt; O[Attribute Index 0: service.name \u2192 String Index 2]\n    J --&gt; P[Attribute Index 1: process.name \u2192 String Index 0]\n    J --&gt; Q[Attribute Index 2: thread.name \u2192 String Index 1]\n\n    H --&gt; R[Sample 1: CPU Time]\n    H --&gt; S[Sample 2: Memory Allocation]\n\n    style I fill:#e1f5fe\n    style J fill:#f3e5f5\n    style K fill:#e8f5e8\n    style L fill:#e8f5e8\n    style M fill:#e8f5e8\n    style N fill:#e8f5e8</code></pre>"},{"location":"development/architecture/#string-table-structure","title":"String Table Structure","text":"<p>The profile's string table contains all string values used throughout the profile:</p> <ul> <li>Index 0: <code>\"main\"</code> (process name)</li> <li>Index 1: <code>\"worker-1\"</code> (thread name)  </li> <li>Index 2: <code>\"my-service\"</code> (service name)</li> <li>Index 3: <code>\"production\"</code> (environment)</li> </ul>"},{"location":"development/architecture/#attribute-table-structure","title":"Attribute Table Structure","text":"<p>The attribute table references string table indices:</p> <ul> <li>service.name \u2192 String Index 2 (<code>\"my-service\"</code>)</li> <li>process.name \u2192 String Index 0 (<code>\"main\"</code>)</li> <li>thread.name \u2192 String Index 1 (<code>\"worker-1\"</code>)</li> </ul>"},{"location":"development/architecture/#filtering-process","title":"Filtering Process","text":"<pre><code>graph LR\n    A[Profile Data] --&gt; B[Extract String Table]\n    B --&gt; C[Apply Process Filter]\n    B --&gt; D[Apply Thread Filter]\n    B --&gt; E[Apply Pattern Filter]\n\n    C --&gt; F{Process Name Match?}\n    D --&gt; G{Thread Name Match?}\n    E --&gt; H{Attribute Value Match?}\n\n    F --&gt;|Yes| I[Include Profile]\n    F --&gt;|No| J[Exclude Profile]\n    G --&gt;|Yes| I\n    G --&gt;|No| J\n    H --&gt;|Yes| I\n    H --&gt;|No| J\n\n    I --&gt; K[Generate Metrics]\n    J --&gt; L[Skip Profile]\n\n    style C fill:#e1f5fe\n    style D fill:#e1f5fe\n    style E fill:#e1f5fe\n    style I fill:#e8f5e8\n    style J fill:#ffebee</code></pre>"},{"location":"development/architecture/#practical-filtering-example","title":"Practical Filtering Example","text":"<p>Given the string table above, here's how filtering works with configuration:</p> <pre><code>process_filter:\n  enabled: true\n  pattern: \"main|worker.*\"  # Matches \"main\" or \"worker-1\"\n\nthread_filter:\n  enabled: true\n  pattern: \"worker-.*\"      # Matches \"worker-1\"\n\npattern_filter:\n  enabled: true\n  pattern: \"my-.*\"          # Matches \"my-service\"\n</code></pre> <p>Result: Only profiles with: - Process name matching <code>\"main|worker.*\"</code> (matches \"main\") - Thread name matching <code>\"worker-.*\"</code> (matches \"worker-1\")  - Service name matching <code>\"my-.*\"</code> (matches \"my-service\")</p> <p>Will be processed into metrics.</p>"},{"location":"development/architecture/#connector-architecture","title":"Connector Architecture","text":""},{"location":"development/architecture/#connector-architecture_1","title":"Connector Architecture","text":"<p>The ProfileToMetrics connector follows the standard OpenTelemetry Collector connector pattern:</p> <ol> <li>Factory: Creates connector instances with default configuration</li> <li>Connector: Processes incoming profiling data and converts to metrics</li> <li>Converter: Core logic for profile-to-metrics transformation</li> <li>Configuration: Flexible configuration for metrics, attributes, and filtering</li> </ol>"},{"location":"development/architecture/#converter-architecture","title":"Converter Architecture","text":""},{"location":"development/architecture/#core-converter","title":"Core Converter","text":"<p>The converter processes profiling data through several stages:</p> <ol> <li>Profile Extraction: Extracts profile data from incoming profiles</li> <li>Attribute Extraction: Extracts attributes from the string table using regex or literal patterns</li> <li>Sample Processing: Processes CPU and memory samples</li> <li>Metric Generation: Creates OpenTelemetry metrics with proper attributes</li> <li>Filtering: Applies process, thread, and pattern filters</li> </ol>"},{"location":"development/architecture/#string-table-extraction","title":"String Table Extraction","text":"<p>The connector extracts attributes from the profiling data's string table using:</p> <ul> <li>Literal Values: Direct string values for static attributes</li> <li>Regular Expressions: Pattern matching for dynamic attribute extraction</li> <li>Index Access: Direct access to string table entries by index</li> </ul>"},{"location":"development/architecture/#sample-processing","title":"Sample Processing","text":"<p>The connector processes different types of samples:</p> <ul> <li>CPU Samples: Calculates CPU time from profiling samples</li> <li>Memory Samples: Calculates memory allocation from profiling samples</li> <li>Filtering: Applies configured filters to focus on specific processes or patterns</li> </ul>"},{"location":"development/architecture/#configuration-architecture","title":"Configuration Architecture","text":""},{"location":"development/architecture/#configuration-structure","title":"Configuration Structure","text":"<p>The connector configuration includes:</p> <ul> <li>Metrics Configuration: CPU and memory metric settings</li> <li>Attribute Configuration: Rules for extracting attributes from string table</li> <li>Filter Configuration: Process, thread, and pattern filtering options</li> </ul>"},{"location":"development/architecture/#configuration-validation","title":"Configuration Validation","text":"<p>The connector validates:</p> <ul> <li>At least one metric type (CPU or Memory) must be enabled</li> <li>Valid regex patterns for filters</li> <li>Required attribute configurations</li> <li>Proper metric naming and units</li> </ul>"},{"location":"development/architecture/#filtering-architecture","title":"Filtering Architecture","text":""},{"location":"development/architecture/#process-filtering","title":"Process Filtering","text":"<p>Filter metrics based on process names using regex patterns:</p> <ul> <li>Enabled: Toggle process filtering on/off</li> <li>Pattern: Regex pattern to match process names</li> <li>Examples: <code>\"my-app.*\"</code>, <code>\"(worker|scheduler).*\"</code></li> </ul>"},{"location":"development/architecture/#thread-filtering","title":"Thread Filtering","text":"<p>Filter metrics based on thread names using regex patterns:</p> <ul> <li>Enabled: Toggle thread filtering on/off  </li> <li>Pattern: Regex pattern to match thread names</li> <li>Examples: <code>\"worker-.*\"</code>, <code>\"(main|background)-.*\"</code></li> </ul>"},{"location":"development/architecture/#pattern-filtering","title":"Pattern Filtering","text":"<p>Filter metrics based on attribute values using regex patterns:</p> <ul> <li>Enabled: Toggle pattern filtering on/off</li> <li>Pattern: Regex pattern to match attribute values</li> <li>Examples: <code>\"service-.*\"</code>, <code>\"(production|staging).*\"</code></li> </ul>"},{"location":"development/architecture/#metric-generation-architecture","title":"Metric Generation Architecture","text":""},{"location":"development/architecture/#cpu-metrics","title":"CPU Metrics","text":"<p>The connector generates CPU metrics with:</p> <ul> <li>Metric Name: Configurable (default: \"cpu_time\")</li> <li>Unit: Time unit (default: \"ns\")</li> <li>Type: Cumulative sum metric</li> <li>Attributes: Extracted from string table and resource attributes</li> <li>Data Points: CPU time values from profiling samples</li> </ul>"},{"location":"development/architecture/#memory-metrics","title":"Memory Metrics","text":"<p>The connector generates memory metrics with:</p> <ul> <li>Metric Name: Configurable (default: \"memory_allocation\") </li> <li>Unit: Memory unit (default: \"bytes\")</li> <li>Type: Cumulative sum metric</li> <li>Attributes: Extracted from string table and resource attributes</li> <li>Data Points: Memory allocation values from profiling samples</li> </ul>"},{"location":"development/architecture/#error-handling-architecture","title":"Error Handling Architecture","text":""},{"location":"development/architecture/#error-types","title":"Error Types","text":"<p>The connector handles several types of errors:</p> <ul> <li>Configuration Errors: Invalid configuration settings</li> <li>Data Errors: Invalid or malformed profiling data</li> <li>Metric Generation Errors: Failures in metric creation</li> <li>Filter Errors: Invalid regex patterns in filters</li> </ul>"},{"location":"development/architecture/#error-handling","title":"Error Handling","text":"<p>The connector provides comprehensive error handling:</p> <ul> <li>Input Validation: Validates profiling data before processing</li> <li>Graceful Degradation: Continues processing when possible</li> <li>Detailed Logging: Logs errors with context for debugging</li> <li>Error Propagation: Returns meaningful error messages</li> </ul>"},{"location":"development/architecture/#logging-architecture","title":"Logging Architecture","text":""},{"location":"development/architecture/#structured-logging","title":"Structured Logging","text":"<p>The connector provides comprehensive logging:</p> <ul> <li>Input Statistics: Logs number of profiles and samples processed</li> <li>Processing Status: Debug information about conversion process</li> <li>Output Statistics: Logs number of metrics generated</li> <li>Error Context: Detailed error information for troubleshooting</li> <li>Performance Metrics: Processing time and throughput information</li> </ul>"},{"location":"development/architecture/#performance-architecture","title":"Performance Architecture","text":""},{"location":"development/architecture/#caching","title":"Caching","text":"<p>The connector implements intelligent caching:</p> <ul> <li>Attribute Caching: Caches frequently accessed string table attributes</li> <li>Pattern Caching: Caches compiled regex patterns for filters</li> <li>Thread-Safe: Concurrent access with read-write locks</li> <li>Memory Efficient: Automatic cache cleanup and size limits</li> </ul>"},{"location":"development/architecture/#batch-processing","title":"Batch Processing","text":"<p>The connector supports efficient batch processing:</p> <ul> <li>Configurable Batch Size: Adjustable batch size for optimal performance</li> <li>Parallel Processing: Concurrent processing of batches</li> <li>Memory Management: Efficient memory usage for large datasets</li> <li>Error Isolation: Batch failures don't affect other batches</li> </ul>"},{"location":"development/architecture/#testing-architecture","title":"Testing Architecture","text":""},{"location":"development/architecture/#test-structure","title":"Test Structure","text":"<p>The connector includes comprehensive testing:</p> <ul> <li>Unit Tests: Individual component testing</li> <li>Integration Tests: End-to-end testing with real data</li> <li>Performance Tests: Load and stress testing</li> <li>Configuration Tests: Validation of all configuration options</li> </ul>"},{"location":"development/architecture/#test-coverage","title":"Test Coverage","text":"<p>The connector maintains high test coverage:</p> <ul> <li>Configuration Validation: All configuration options tested</li> <li>Metric Generation: CPU and memory metric generation tested</li> <li>Filtering Logic: All filter types and patterns tested</li> <li>Error Handling: Error scenarios and edge cases tested</li> <li>Performance: Load testing and performance benchmarks</li> </ul>"},{"location":"development/thread-process-filtering/","title":"Thread and Process Filtering for Profile Metrics","text":""},{"location":"development/thread-process-filtering/#overview","title":"Overview","text":"<p>This feature enables users to calculate CPU time and memory allocation metrics for specific threads or processes within profile data. This allows for granular analysis of which threads or processes are consuming the most resources.</p>"},{"location":"development/thread-process-filtering/#current-implementation-status","title":"Current Implementation Status","text":""},{"location":"development/thread-process-filtering/#implemented","title":"\u2705 Implemented","text":"<ol> <li>Filter Support Infrastructure:</li> <li>Added <code>calculateCPUTimeForFilter()</code> method to calculate CPU time with optional filtering</li> <li>Added <code>calculateMemoryAllocationForFilter()</code> method to calculate memory allocation with optional filtering</li> <li>Added <code>matchesSampleFilter()</code> method to check if a sample matches filter criteria</li> <li> <p>Added helper functions <code>generateThreadMetrics()</code> and <code>generateProcessMetrics()</code> to generate metrics for specific threads/processes</p> </li> <li> <p>Metric Generation:</p> </li> <li>The main profile processing loop calls <code>getUniqueThreadNames()</code> and <code>getUniqueProcessNames()</code> </li> <li>For each unique thread/process, it generates dedicated metrics with sanitized names</li> <li>Metrics are named like <code>cpu_time_thread_thread_name</code> and <code>memory_allocation_process_process_name</code></li> </ol>"},{"location":"development/thread-process-filtering/#pending-implementation","title":"\u26a0\ufe0f Pending Implementation","text":"<p>The feature is currently stubbed out because the OpenTelemetry pprofile API doesn't provide direct access to sample attributes. The following functions need to be implemented based on the actual data structure:</p> <ol> <li><code>getSampleAttributeValue()</code>: Currently returns empty string. Needs to:</li> <li>Parse attributes from the sample data structure</li> <li>Extract thread.name, process.executable.name, or other attributes</li> <li> <p>Handle the actual pprofile data model (which may store attributes in location/mapping/labels)</p> </li> <li> <p><code>getUniqueThreadNames()</code>: Currently returns empty list. Needs to:</p> </li> <li>Iterate through profile samples</li> <li>Extract unique thread names from sample attributes</li> <li> <p>Return a list of unique thread identifiers</p> </li> <li> <p><code>getUniqueProcessNames()</code>: Currently returns empty list. Needs to:</p> </li> <li>Iterate through profile samples  </li> <li>Extract unique process names from sample attributes</li> <li>Return a list of unique process identifiers</li> </ol>"},{"location":"development/thread-process-filtering/#how-it-would-work-once-implemented","title":"How It Would Work (Once Implemented)","text":""},{"location":"development/thread-process-filtering/#usage-example","title":"Usage Example","text":"<p>When a user receives profile data with the following structure:</p> <pre><code>Sample #1:\n  thread.name: \"wrk:worker_1\"\n  process.executable.name: \"envoy\"\n\nSample #2:\n  thread.name: \"wrk:worker_2\"\n  process.executable.name: \"envoy\"\n\nSample #3:\n  thread.name: \"main\"\n  process.executable.name: \"app\"\n</code></pre> <p>The connector would automatically generate:</p> <p>Thread-Specific Metrics: - <code>cpu_time_thread_wrk_worker_1</code> - <code>cpu_time_thread_wrk_worker_2</code> - <code>cpu_time_thread_main</code> - <code>memory_allocation_thread_wrk_worker_1</code> - <code>memory_allocation_thread_wrk_worker_2</code> - <code>memory_allocation_thread_main</code></p> <p>Process-Specific Metrics: - <code>cpu_time_process_envoy</code> - <code>cpu_time_process_app</code> - <code>memory_allocation_process_envoy</code> - <code>memory_allocation_process_app</code></p>"},{"location":"development/thread-process-filtering/#implementation-approach","title":"Implementation Approach","text":"<p>To properly implement this feature, you need to:</p> <ol> <li>Understand the pprofile Data Structure:</li> <li>Research how OpenTelemetry stores sample-level attributes</li> <li>Check if attributes are stored in Location, Mapping, or Label structures</li> <li> <p>Review the pprofile protobuf definitions</p> </li> <li> <p>Access Sample Attributes:</p> </li> <li>Implement attribute extraction based on the actual data structure</li> <li>May need to traverse profile.Location, profile.Mapping, or profile.Label structures</li> <li> <p>Handle different attribute storage mechanisms (string table, direct values, etc.)</p> </li> <li> <p>Handle Attribute Names:</p> </li> <li>Standardize attribute key names (e.g., \"thread.name\" vs \"thread_name\")</li> <li>Support multiple attribute naming conventions</li> <li> <p>Handle missing attributes gracefully</p> </li> <li> <p>Test with Real Data:</p> </li> <li>Use actual profile data from eBPF profilers or similar tools</li> <li>Verify attribute extraction works correctly</li> <li>Test with various attribute formats and structures</li> </ol>"},{"location":"development/thread-process-filtering/#code-locations","title":"Code Locations","text":"<ul> <li>Filter functions: <code>pkg/profiletometrics/converter.go</code> lines 304-421</li> <li>Helper functions: <code>pkg/profiletometrics/converter.go</code> lines 417-453  </li> <li>Main integration: <code>pkg/profiletometrics/converter.go</code> lines 238-250</li> </ul>"},{"location":"development/thread-process-filtering/#function-level-metrics-proposed","title":"Function-Level Metrics (Proposed)","text":""},{"location":"development/thread-process-filtering/#overview_1","title":"Overview","text":"<p>Since processes and threads are composed of multiple functions, we should support:</p> <ol> <li>Function-level metrics: CPU time and memory allocation per function</li> <li>Hierarchical aggregation: Function metrics roll up to process/thread totals</li> <li>Global process totals: Total CPU/memory across all threads in a process</li> </ol>"},{"location":"development/thread-process-filtering/#proposed-metrics-structure","title":"Proposed Metrics Structure","text":"<pre><code># Process-level metrics\ncpu_time_process_envoy = &lt;total CPU across all threads&gt;\nmemory_allocation_process_envoy = &lt;total memory across all threads&gt;\n\n# Thread-level metrics  \ncpu_time_thread_wrk_worker_1 = &lt;total CPU for this thread&gt;\nmemory_allocation_thread_wrk_worker_1 = &lt;total memory for this thread&gt;\n\n# Function-level metrics (within a thread)\ncpu_time_function_main_thread_main_function = &lt;CPU for main function in main thread&gt;\ncpu_time_function_main_thread_envoy_accept = &lt;CPU for accept function in main thread&gt;\nmemory_allocation_function_main_thread_main_function = &lt;memory for main function&gt;\n</code></pre>"},{"location":"development/thread-process-filtering/#implementation-approach_1","title":"Implementation Approach","text":"<ol> <li>Access Stack Traces: Use <code>profile.Location()</code> to get function information</li> <li>Calculate Function Metrics: Sum CPU/memory for each unique function</li> <li>Maintain Hierarchical Totals: Ensure function totals equal thread totals, thread totals equal process totals</li> <li>Handle Cardinality: Consider limits on function metrics to prevent explosion</li> </ol>"},{"location":"development/thread-process-filtering/#configuration","title":"Configuration","text":"<pre><code>connectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n      memory:\n        enabled: true\n      # Enable function-level metrics\n      function_metrics:\n        enabled: true\n        max_functions: 100  # Limit to prevent cardinality explosion\n    # Enable thread/process aggregation\n    thread_metrics:\n      enabled: true\n    process_metrics:\n      enabled: true\n</code></pre>"},{"location":"development/thread-process-filtering/#future-enhancements","title":"Future Enhancements","text":"<p>Once the basic filtering is implemented, consider:</p> <ol> <li>Configuration Support: Allow users to enable/disable thread/process/function metrics</li> <li>Pattern Matching: Support regex patterns for thread/process/function names</li> <li>Aggregation: Support min/max/avg aggregations per thread/process/function</li> <li>Cardinality Control: Limit the number of unique threads/processes/functions to track</li> <li>Sampling: Sample high-cardinality function data</li> <li>Call Tree Metrics: Track parent-child relationships in call stacks</li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide covers different ways to install and use the ProfileToMetrics Connector.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>OpenTelemetry Collector: Version 0.137.0 or later</li> <li>Feature Gate: <code>+service.profilesSupport</code> must be enabled</li> <li>Go: Version 1.23.0 or later (for building from source)</li> <li>Docker: For containerized deployment</li> <li>Kubernetes: For K8s deployment (optional)</li> </ul>"},{"location":"getting-started/installation/#feature-gates","title":"Feature Gates","text":"<p>\u26a0\ufe0f Important: The ProfileToMetrics connector requires the <code>+service.profilesSupport</code> feature gate to be enabled:</p> <pre><code># Command line\notelcol --feature-gates=+service.profilesSupport\n\n# Docker\ndocker run --feature-gates=+service.profilesSupport hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#1-docker-recommended","title":"1. Docker (Recommended)","text":"<p>The easiest way to get started is using the pre-built Docker image.</p>"},{"location":"getting-started/installation/#pull-the-image","title":"Pull the Image","text":"<pre><code>docker pull hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"getting-started/installation/#run-with-configuration","title":"Run with Configuration","text":"<pre><code>docker run -p 4317:4317 -p 8888:8888 \\\n  --feature-gates=+service.profilesSupport \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"Variable Default Description <code>OTEL_CONFIG</code> <code>/etc/otelcol/config.yaml</code> Path to configuration file <code>OTEL_LOG_LEVEL</code> <code>info</code> Log level (debug, info, warn, error)"},{"location":"getting-started/installation/#2-kubernetes","title":"2. Kubernetes","text":"<p>Deploy using the provided Kubernetes manifests.</p>"},{"location":"getting-started/installation/#quick-deploy","title":"Quick Deploy","text":"<pre><code># Apply all manifests\nkubectl apply -f k8s/namespace.yaml\nkubectl apply -f k8s/rbac.yaml\nkubectl apply -f k8s/configmap.yaml\nkubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n</code></pre>"},{"location":"getting-started/installation/#verify-deployment","title":"Verify Deployment","text":"<pre><code># Check pods\nkubectl get pods -n otel-collector\n\n# Check logs\nkubectl logs -n otel-collector deployment/otel-collector\n\n# Check service\nkubectl get svc -n otel-collector\n</code></pre>"},{"location":"getting-started/installation/#3-build-from-source","title":"3. Build from Source","text":""},{"location":"getting-started/installation/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Go 1.23.0+</li> <li>Git</li> <li>Make</li> </ul>"},{"location":"getting-started/installation/#build-steps","title":"Build Steps","text":"<pre><code># Clone the repository\ngit clone https://github.com/henrikrexed/profiletoMetrics.git\ncd profiletoMetrics\n\n# Install dependencies\ngo mod tidy\n\n# Run tests\nmake test\n\n# Build the collector\nmake build\n\n# Build Docker image\nmake docker-build\n</code></pre>"},{"location":"getting-started/installation/#using-makefile","title":"Using Makefile","text":"<p>The project includes a comprehensive Makefile with the following targets:</p> <pre><code># Build the collector\nmake build\n\n# Run tests\nmake test\n\n# Build Docker image\nmake docker-build\n\n# Install OCB (OpenTelemetry Collector Builder)\nmake install-ocb\n\n# Clean build artifacts\nmake clean\n</code></pre>"},{"location":"getting-started/installation/#4-opentelemetry-collector-builder-ocb","title":"4. OpenTelemetry Collector Builder (OCB)","text":"<p>Build a custom collector with the ProfileToMetrics connector.</p>"},{"location":"getting-started/installation/#install-ocb","title":"Install OCB","text":"<pre><code># Install OCB\ngo install go.opentelemetry.io/collector/cmd/builder@v0.137.0\n\n# Verify installation\nbuilder --version\n</code></pre>"},{"location":"getting-started/installation/#build-custom-collector","title":"Build Custom Collector","text":"<pre><code># Build with OCB\nocb --config ocb/manifest.yaml\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#basic-configuration","title":"Basic Configuration","text":"<p>Create a <code>config.yaml</code> file:</p> <pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n\nexporters:\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      connectors: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      exporters: [debug]\n</code></pre>"},{"location":"getting-started/installation/#advanced-configuration","title":"Advanced Configuration","text":"<p>See the Configuration Guide for detailed configuration options.</p>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#1-check-collector-status","title":"1. Check Collector Status","text":"<pre><code># Health check endpoint\ncurl http://localhost:8888/\n\n# Metrics endpoint\ncurl http://localhost:8888/metrics\n</code></pre>"},{"location":"getting-started/installation/#2-send-test-data","title":"2. Send Test Data","text":"<pre><code># Send test profiling data\n./scripts/send-test-data.sh\n</code></pre>"},{"location":"getting-started/installation/#3-check-logs","title":"3. Check Logs","text":"<pre><code># Docker logs\ndocker logs &lt;container-id&gt;\n\n# Kubernetes logs\nkubectl logs -n otel-collector deployment/otel-collector\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#1-port-already-in-use","title":"1. Port Already in Use","text":"<pre><code># Check what's using the port\nlsof -i :4317\n\n# Kill the process\nkill -9 &lt;PID&gt;\n</code></pre>"},{"location":"getting-started/installation/#2-configuration-errors","title":"2. Configuration Errors","text":"<pre><code># Validate configuration\notelcol --config config.yaml --dry-run\n</code></pre>"},{"location":"getting-started/installation/#3-permission-issues-kubernetes","title":"3. Permission Issues (Kubernetes)","text":"<pre><code># Check RBAC\nkubectl auth can-i create pods --as=system:serviceaccount:otel-collector:otel-collector\n</code></pre>"},{"location":"getting-started/installation/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging for troubleshooting:</p> <pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide</li> <li>Configuration Reference</li> <li>Deployment Options</li> </ul>"},{"location":"getting-started/overview/","title":"Overview","text":"<p>The ProfileToMetrics Connector is an OpenTelemetry Collector connector that transforms profiling data into metrics. It's designed to be generic and configurable, allowing users to extract meaningful metrics from profiling data.</p>"},{"location":"getting-started/overview/#what-is-profiling-data","title":"What is Profiling Data?","text":"<p>Profiling data contains information about program execution, including:</p> <ul> <li>CPU Time: How much CPU time is spent in different functions</li> <li>Memory Allocation: How much memory is allocated by different parts of the code</li> <li>Call Stacks: The sequence of function calls that led to a particular sample</li> <li>Metadata: Additional information like process names, thread names, and custom attributes</li> </ul>"},{"location":"getting-started/overview/#how-the-connector-works","title":"How the Connector Works","text":"<pre><code>graph LR\n    A[Profiling Data] --&gt; B[String Table Extraction]\n    B --&gt; C[Sample Processing]\n    C --&gt; D[CPU/Memory Detection]\n    D --&gt; E[Metric Generation]\n    E --&gt; F[Attribute Attachment]\n    F --&gt; G[Filtering]\n    G --&gt; H[OpenTelemetry Metrics]</code></pre>"},{"location":"getting-started/overview/#1-string-table-extraction","title":"1. String Table Extraction","text":"<p>The connector extracts attributes from the profiling data's string table using: - Literal values: Exact string matches - Regular expressions: Pattern-based extraction</p>"},{"location":"getting-started/overview/#2-sample-processing","title":"2. Sample Processing","text":"<p>Each sample in the profiling data is processed to: - Identify the sample type (CPU or Memory) - Extract relevant metrics - Apply filtering rules</p>"},{"location":"getting-started/overview/#3-metric-generation","title":"3. Metric Generation","text":"<p>The connector generates two types of metrics: - CPU Time Metrics: Based on CPU profiling samples - Memory Allocation Metrics: Based on memory profiling samples</p>"},{"location":"getting-started/overview/#4-attribute-attachment","title":"4. Attribute Attachment","text":"<p>Custom attributes are attached to metrics based on: - String table values - Process and thread information - User-defined extraction rules</p>"},{"location":"getting-started/overview/#5-filtering","title":"5. Filtering","text":"<p>Multiple levels of filtering are available: - Process Filtering: Filter by process name patterns - Thread Filtering: Filter by thread name patterns - Pattern Filtering: Filter by attribute patterns</p>"},{"location":"getting-started/overview/#supported-profiling-formats","title":"Supported Profiling Formats","text":"<p>The connector is designed to work with OpenTelemetry profiling data format, which includes:</p> <ul> <li>CPU Profiling: Function-level CPU time measurements</li> <li>Memory Profiling: Allocation and deallocation tracking</li> <li>Custom Profiling: User-defined profiling data</li> </ul>"},{"location":"getting-started/overview/#use-cases","title":"Use Cases","text":""},{"location":"getting-started/overview/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Track CPU usage by function</li> <li>Monitor memory allocation patterns</li> <li>Identify performance bottlenecks</li> </ul>"},{"location":"getting-started/overview/#resource-optimization","title":"Resource Optimization","text":"<ul> <li>Optimize CPU-intensive operations</li> <li>Reduce memory allocations</li> <li>Improve application efficiency</li> </ul>"},{"location":"getting-started/overview/#observability","title":"Observability","text":"<ul> <li>Integrate profiling data with metrics</li> <li>Create dashboards and alerts</li> <li>Correlate performance with business metrics</li> </ul>"},{"location":"getting-started/overview/#benefits","title":"Benefits","text":"<ul> <li>Generic Design: Works with any profiling data format</li> <li>Configurable: Highly customizable attribute extraction</li> <li>Filterable: Multiple filtering options for precise control</li> <li>Observable: Full integration with OpenTelemetry ecosystem</li> <li>Scalable: Designed for high-throughput environments</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with the ProfileToMetrics Connector in minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed</li> <li>Basic understanding of OpenTelemetry</li> </ul>"},{"location":"getting-started/quick-start/#step-1-create-configuration","title":"Step 1: Create Configuration","text":"<p>Create a <code>config.yaml</code> file:</p> <pre><code>receivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nconnectors:\n  profiletometrics:\n    metrics:\n      cpu:\n        enabled: true\n        metric_name: \"cpu_time\"\n      memory:\n        enabled: true\n        metric_name: \"memory_allocation\"\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n\nexporters:\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    profiles:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [profiletometrics]\n    metrics:\n      receivers: [profiletometrics]\n      processors: [batch]\n      exporters: [debug]\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-run-the-collector","title":"Step 2: Run the Collector","text":"<pre><code># Pull the image\ndocker pull hrexed/otel-collector-profilemetrics:0.1.0\n\n# Run the collector with profiles feature gate enabled\ndocker run -p 4317:4317 -p 8888:8888 \\\n  --feature-gates=+service.profilesSupport \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre> <p>\u26a0\ufe0f Important: The <code>+service.profilesSupport</code> feature gate must be enabled to use the profiles pipeline.</p>"},{"location":"getting-started/quick-start/#step-3-send-test-data","title":"Step 3: Send Test Data","text":"<p>In another terminal, send test profiling data:</p> <pre><code># Clone the repository\ngit clone https://github.com/henrikrexed/profiletoMetrics.git\ncd profiletoMetrics\n\n# Send test data\n./scripts/send-test-data.sh\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-verify-output","title":"Step 4: Verify Output","text":"<p>You should see debug output showing:</p> <pre><code>2024-01-15T10:30:00.000Z    info    ProfileToMetrics connector started\n2024-01-15T10:30:00.000Z    debug   Processing profiles {\"resource_profiles_count\": 1, \"total_profiles\": 1}\n2024-01-15T10:30:00.000Z    debug   Profiles converted to metrics   {\"input_profiles\": 1, \"output_metrics\": 2}\n</code></pre>"},{"location":"getting-started/quick-start/#step-5-check-metrics","title":"Step 5: Check Metrics","text":"<p>Visit the metrics endpoint:</p> <pre><code>curl http://localhost:8888/metrics\n</code></pre> <p>You should see metrics like:</p> <pre><code># HELP cpu_time CPU time in seconds\n# TYPE cpu_time counter\ncpu_time{service_name=\"my-service\"} 0.123\n\n# HELP memory_allocation Memory allocation in bytes\n# TYPE memory_allocation counter\nmemory_allocation{service_name=\"my-service\"} 1024\n</code></pre>"},{"location":"getting-started/quick-start/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/quick-start/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code>service:\n  telemetry:\n    logs:\n      level: debug\n      development: true\n</code></pre>"},{"location":"getting-started/quick-start/#add-more-attributes","title":"Add More Attributes","text":"<pre><code>connectors:\n  profiletometrics:\n    attributes:\n      - key: \"service.name\"\n        value: \"my-service\"\n      - key: \"environment\"\n        value: \"production\"\n      - key: \"version\"\n        value: \"1.0.0\"\n</code></pre>"},{"location":"getting-started/quick-start/#filter-by-process","title":"Filter by Process","text":"<pre><code>connectors:\n  profiletometrics:\n    process_filter:\n      enabled: true\n      pattern: \"my-app.*\"\n    thread_filter:\n      enabled: true\n      pattern: \"worker-.*\"\n</code></pre>"},{"location":"getting-started/quick-start/#kubernetes-quick-start","title":"Kubernetes Quick Start","text":""},{"location":"getting-started/quick-start/#1-apply-manifests","title":"1. Apply Manifests","text":"<pre><code>kubectl apply -f k8s/namespace.yaml\nkubectl apply -f k8s/rbac.yaml\nkubectl apply -f k8s/configmap.yaml\nkubectl apply -f k8s/deployment.yaml\nkubectl apply -f k8s/service.yaml\n</code></pre>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#1-no-metrics-generated","title":"1. No Metrics Generated","text":"<ul> <li>Check if profiling data is being sent</li> <li>Verify connector configuration</li> <li>Enable debug logging</li> </ul>"},{"location":"getting-started/quick-start/#debug-commands","title":"Debug Commands","text":"<pre><code># Check collector health\ncurl http://localhost:8888/\n\n# Check metrics\ncurl http://localhost:8888/metrics\n\n# Check logs with debug level\ndocker run -e OTEL_LOG_LEVEL=debug \\\n  -v $(pwd)/config.yaml:/etc/otelcol/config.yaml \\\n  hrexed/otel-collector-profilemetrics:0.1.0\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Guide</li> <li>Docker Deployment</li> <li>Kubernetes Deployment</li> <li>Testing Guide</li> </ul>"},{"location":"testing/unit-tests/","title":"Unit Tests","text":"<p>This guide covers running and writing unit tests for the ProfileToMetrics Connector.</p>"},{"location":"testing/unit-tests/#running-tests","title":"Running Tests","text":""},{"location":"testing/unit-tests/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\ngo test ./...\n\n# Run tests with verbose output\ngo test -v ./...\n\n# Run tests with coverage\ngo test -cover ./...\n\n# Run tests with coverage report\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out -o coverage.html\n</code></pre>"},{"location":"testing/unit-tests/#using-makefile","title":"Using Makefile","text":"<pre><code># Run tests\nmake test\n\n# Run tests with coverage\nmake test-coverage\n\n# Run specific test package\nmake test PKG=pkg/profiletometrics\n\n# Run tests with race detection\nmake test-race\n</code></pre>"},{"location":"testing/unit-tests/#test-scripts","title":"Test Scripts","text":"<pre><code># Run all tests with coverage\n./run_tests.sh\n\n# Run specific test\ngo test -v ./pkg/profiletometrics -run TestConvertProfilesToMetrics\n</code></pre>"},{"location":"testing/unit-tests/#test-structure","title":"Test Structure","text":""},{"location":"testing/unit-tests/#package-organization","title":"Package Organization","text":"<pre><code>pkg/profiletometrics/\n\u251c\u2500\u2500 converter.go\n\u251c\u2500\u2500 converter_test.go\n\u251c\u2500\u2500 converter_connector.go\n\u251c\u2500\u2500 config.go\n\u2514\u2500\u2500 config_test.go\n</code></pre>"},{"location":"testing/unit-tests/#test-files","title":"Test Files","text":"<p>Each Go package should have corresponding test files:</p> <ul> <li><code>converter_test.go</code> - Tests for the converter logic</li> <li><code>config_test.go</code> - Tests for configuration validation</li> <li><code>connector_test.go</code> - Tests for the connector implementation</li> </ul>"},{"location":"testing/unit-tests/#test-categories","title":"Test Categories","text":""},{"location":"testing/unit-tests/#unit-tests_1","title":"Unit Tests","text":"<p>Test individual functions and methods:</p> <ul> <li>Converter Logic: Test profile-to-metrics conversion</li> <li>Configuration Validation: Test configuration parsing and validation</li> <li>Filtering Logic: Test process, thread, and pattern filters</li> <li>Attribute Extraction: Test string table extraction</li> </ul>"},{"location":"testing/unit-tests/#integration-tests","title":"Integration Tests","text":"<p>Test the complete flow:</p> <ul> <li>End-to-End Conversion: Test full profile-to-metrics pipeline</li> <li>Configuration Loading: Test configuration file loading</li> <li>Error Handling: Test error scenarios and recovery</li> <li>Performance: Test with realistic data volumes</li> </ul>"},{"location":"testing/unit-tests/#configuration-tests","title":"Configuration Tests","text":"<p>Test configuration validation:</p> <ul> <li>Valid Configurations: Test various valid configuration combinations</li> <li>Invalid Configurations: Test error handling for invalid configs</li> <li>Default Values: Test default configuration behavior</li> <li>Edge Cases: Test boundary conditions</li> </ul>"},{"location":"testing/unit-tests/#test-coverage","title":"Test Coverage","text":""},{"location":"testing/unit-tests/#coverage-goals","title":"Coverage Goals","text":"<ul> <li>Unit Tests: 80%+ coverage</li> <li>Integration Tests: 60%+ coverage</li> <li>Critical Paths: 100% coverage</li> </ul>"},{"location":"testing/unit-tests/#coverage-commands","title":"Coverage Commands","text":"<pre><code># Generate coverage report\ngo test -coverprofile=coverage.out ./...\n\n# View coverage in browser\ngo tool cover -html=coverage.out\n\n# Coverage by function\ngo tool cover -func=coverage.out\n\n# Coverage threshold check\ngo test -cover ./... | grep -E \"coverage: [0-9]+\\.[0-9]+%\"\n</code></pre>"},{"location":"testing/unit-tests/#coverage-analysis","title":"Coverage Analysis","text":"<pre><code># Check coverage for specific package\ngo test -cover ./pkg/profiletometrics\n\n# Coverage with race detection\ngo test -race -cover ./...\n\n# Coverage for specific test\ngo test -cover -run TestConvertProfilesToMetrics ./pkg/profiletometrics\n</code></pre>"},{"location":"testing/unit-tests/#test-data","title":"Test Data","text":""},{"location":"testing/unit-tests/#test-data-structure","title":"Test Data Structure","text":"<p>The connector includes comprehensive test data for:</p> <ul> <li>CPU Profiling Data: CPU time samples and call stacks</li> <li>Memory Profiling Data: Memory allocation samples</li> <li>String Table Data: Various string table configurations</li> <li>Attribute Data: Different attribute extraction scenarios</li> </ul>"},{"location":"testing/unit-tests/#test-data-variants","title":"Test Data Variants","text":"<ul> <li>CPU Test Data: CPU-specific profiling samples</li> <li>Memory Test Data: Memory allocation samples</li> <li>Filtered Test Data: Test data with various filtering scenarios</li> <li>Edge Case Data: Boundary conditions and error cases</li> </ul>"},{"location":"testing/unit-tests/#performance-tests","title":"Performance Tests","text":""},{"location":"testing/unit-tests/#benchmark-tests","title":"Benchmark Tests","text":"<p>The connector includes benchmark tests for:</p> <ul> <li>Conversion Performance: Profile-to-metrics conversion speed</li> <li>Memory Usage: Memory consumption during processing</li> <li>Throughput: Processing rate with large datasets</li> <li>Scalability: Performance with increasing data volumes</li> </ul>"},{"location":"testing/unit-tests/#memory-tests","title":"Memory Tests","text":"<p>Test memory usage and potential leaks:</p> <ul> <li>Memory Allocation: Track memory usage during processing</li> <li>Memory Leaks: Detect memory leaks in long-running operations</li> <li>Garbage Collection: Test GC behavior with large datasets</li> <li>Resource Cleanup: Verify proper resource cleanup</li> </ul>"},{"location":"testing/unit-tests/#test-utilities","title":"Test Utilities","text":""},{"location":"testing/unit-tests/#test-helpers","title":"Test Helpers","text":"<p>The connector provides test utilities for:</p> <ul> <li>Metric Comparison: Compare generated metrics with expected results</li> <li>Configuration Loading: Load test configurations from files</li> <li>Mock Data: Generate mock profiling data for testing</li> <li>Assertion Helpers: Custom assertions for OpenTelemetry data types</li> </ul>"},{"location":"testing/unit-tests/#test-fixtures","title":"Test Fixtures","text":"<ul> <li>Configuration Files: Pre-defined test configurations</li> <li>Sample Data: Realistic profiling data samples</li> <li>Expected Results: Expected output for validation</li> <li>Test Scenarios: Common test scenarios and edge cases</li> </ul>"},{"location":"testing/unit-tests/#continuous-integration","title":"Continuous Integration","text":""},{"location":"testing/unit-tests/#github-actions","title":"GitHub Actions","text":"<p>The connector includes CI/CD pipelines for:</p> <ul> <li>Automated Testing: Run tests on every commit</li> <li>Coverage Reporting: Generate and report test coverage</li> <li>Performance Testing: Run performance benchmarks</li> <li>Cross-Platform Testing: Test on multiple operating systems</li> </ul>"},{"location":"testing/unit-tests/#test-reports","title":"Test Reports","text":"<pre><code># Generate test report\ngo test -json ./... &gt; test-results.json\n\n# Generate coverage report\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out -o coverage.html\n</code></pre>"},{"location":"testing/unit-tests/#troubleshooting-tests","title":"Troubleshooting Tests","text":""},{"location":"testing/unit-tests/#common-issues","title":"Common Issues","text":""},{"location":"testing/unit-tests/#1-test-timeouts","title":"1. Test Timeouts","text":"<ul> <li>Long-Running Tests: Use timeouts for long-running operations</li> <li>Resource Cleanup: Ensure proper cleanup in test teardown</li> <li>Context Cancellation: Use context for test cancellation</li> </ul>"},{"location":"testing/unit-tests/#2-race-conditions","title":"2. Race Conditions","text":"<pre><code># Run tests with race detection\ngo test -race ./...\n\n# Run specific test with race detection\ngo test -race -run TestConcurrentAccess ./pkg/profiletometrics\n</code></pre>"},{"location":"testing/unit-tests/#3-memory-leaks","title":"3. Memory Leaks","text":"<ul> <li>Memory Monitoring: Track memory usage in tests</li> <li>Resource Cleanup: Verify proper resource cleanup</li> <li>Long-Running Tests: Test memory behavior over time</li> <li>Garbage Collection: Test GC behavior with large datasets</li> </ul>"},{"location":"testing/unit-tests/#debug-commands","title":"Debug Commands","text":"<pre><code># Run tests with debug output\ngo test -v ./...\n\n# Run specific test with debug\ngo test -v -run TestSpecificFunction ./pkg/profiletometrics\n\n# Run tests with race detection\ngo test -race ./...\n\n# Run tests with memory profiling\ngo test -memprofile=mem.prof ./...\n</code></pre>"},{"location":"testing/unit-tests/#best-practices","title":"Best Practices","text":""},{"location":"testing/unit-tests/#test-organization","title":"Test Organization","text":"<ul> <li>Package Structure: Organize tests by package and functionality</li> <li>Test Naming: Use descriptive test names that explain the scenario</li> <li>Test Data: Use realistic test data that matches production scenarios</li> <li>Test Isolation: Ensure tests don't depend on each other</li> </ul>"},{"location":"testing/unit-tests/#test-writing","title":"Test Writing","text":"<ul> <li>Arrange-Act-Assert: Follow the AAA pattern for test structure</li> <li>Test Coverage: Aim for high coverage of critical paths</li> <li>Edge Cases: Test boundary conditions and error scenarios</li> <li>Performance: Include performance tests for critical operations</li> </ul>"},{"location":"testing/unit-tests/#test-maintenance","title":"Test Maintenance","text":"<ul> <li>Regular Updates: Keep tests updated with code changes</li> <li>Test Documentation: Document complex test scenarios</li> <li>Test Review: Review tests as part of code review process</li> <li>Test Metrics: Track test coverage and performance metrics</li> </ul>"}]}