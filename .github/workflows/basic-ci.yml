name: Basic CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Basic build and test
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

    - name: Set up Go
      uses: actions/setup-go@v5.1.0
      with:
        go-version: '1.24'
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Basic security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5.1.0
      with:
        go-version: '1.24'
        cache: true

    - name: Install Gosec
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: |
        gosec -fmt sarif -out gosec.sarif ./...
      continue-on-error: true

    - name: Check if Gosec results exist
      id: gosec-check
      run: |
        if [ -f "gosec.sarif" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "✓ Gosec results file found"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✗ Gosec results file not found"
        fi

    - name: Upload Gosec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.gosec-check.outputs.exists == 'true'
      with:
        sarif_file: gosec.sarif

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # OSS Scorecard
  oss-scorecard:
    name: OSS Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      with:
        fetch-depth: 0

    - name: Run OSS Scorecard
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true
        repo_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload OSS Scorecard results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif
