name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.24'
  DOCKER_IMAGE: hrexed/otel-collector-profilemetrics
  DOCKER_TAG: latest

jobs:
  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.24']
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run static analysis
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Scanning Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload Gosec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec.sarif

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # OSS Scorecard Job
  oss-scorecard:
    name: OSS Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run OSS Scorecard
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true
        repo_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload OSS Scorecard results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif

  # Docker Build and Test Job
  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{version}}-{{commit}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} --help

  # Integration Tests Job
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run integration tests
      run: |
        # Test the Docker image with debug configuration
        docker run -d --name otelcol-test \
          -p 4317:4317 \
          -p 4318:4318 \
          -v $(pwd)/examples/final-debug-config.yaml:/etc/otelcol/config.yaml \
          ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
          --config=/etc/otelcol/config.yaml
        
        # Wait for collector to start
        sleep 10
        
        # Test OTLP endpoint
        curl -X POST http://localhost:4318/v1/traces \
          -H "Content-Type: application/json" \
          -d '{
            "resourceSpans": [{
              "resource": {
                "attributes": [{
                  "key": "service.name",
                  "value": {"stringValue": "test-service"}
                }]
              },
              "scopeSpans": [{
                "scope": {"name": "test-scope"},
                "spans": [{
                  "traceId": "12345678901234567890123456789012",
                  "spanId": "1234567890123456",
                  "name": "test-span",
                  "kind": "SPAN_KIND_INTERNAL",
                  "startTimeUnixNano": "1640995200000000000",
                  "endTimeUnixNano": "1640995201000000000"
                }]
              }]
            }]
          }'
        
        # Check logs for debug output
        docker logs otelcol-test
        
        # Cleanup
        docker stop otelcol-test
        docker rm otelcol-test

  # Code Quality Job
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

    - name: Run ineffassign
      run: |
        go install github.com/gordonklaus/ineffassign@latest
        ineffassign ./...

    - name: Run misspell
      run: |
        go install github.com/client9/misspell/cmd/misspell@latest
        misspell -error .

    - name: Run gocyclo
      run: |
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        gocyclo -over 15 .

  # Documentation Job
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check documentation
      run: |
        go doc -all ./... > /dev/null
        echo "Documentation check passed"

    - name: Generate documentation
      run: |
        go doc -all ./... > docs/api.md
        echo "API documentation generated"

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/

  # Release Job
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, oss-scorecard, docker-build, integration-tests]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.release.tag_name }}
        release_name: ${{ github.event.release.name }}
        body: |
          ## Changes in this Release
          
          ### Features
          - Profile to Metrics connector implementation
          - Debug logging support
          - Docker image with custom collector
          
          ### Security
          - Security scanning with Gosec and Trivy
          - OSS Scorecard compliance
          
          ### Quality
          - Comprehensive test coverage
          - Code quality checks
          - Integration testing
        draft: false
        prerelease: false
