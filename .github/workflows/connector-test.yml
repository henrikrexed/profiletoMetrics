name: Connector Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Test connector with different configurations
  connector-config-tests:
    name: Connector Configuration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        config: [
          'examples/simple-config.yaml',
          'examples/debug-config.yaml',
          'examples/working-debug-config.yaml'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'


    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Build collector using Docker
      run: |
        # Build the collector using Docker (which handles OCB internally)
        make docker-build DOCKER_IMAGE=otelcol-profiletometrics DOCKER_TAG=test
        # Extract the binary from the Docker image
        docker create --name temp-container otelcol-profiletometrics:test
        docker cp temp-container:/otelcol-profiletometrics ./otelcol-profiletometrics
        docker rm temp-container
        chmod +x ./otelcol-profiletometrics

    - name: Test configuration ${{ matrix.config }}
      run: |
        # Test configuration validation
        ./otelcol-profiletometrics --config=${{ matrix.config }} --dry-run
        
        # Test configuration parsing
        ./otelcol-profiletometrics --config=${{ matrix.config }} --help

  # Test connector with real data
  connector-data-tests:
    name: Connector Data Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'


    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Build collector using Docker
      run: |
        # Build the collector using Docker (which handles OCB internally)
        make docker-build DOCKER_IMAGE=otelcol-profiletometrics DOCKER_TAG=test
        # Extract the binary from the Docker image
        docker create --name temp-container otelcol-profiletometrics:test
        docker cp temp-container:/otelcol-profiletometrics ./otelcol-profiletometrics
        docker rm temp-container
        chmod +x ./otelcol-profiletometrics

    - name: Start collector with debug config
      run: |
        ./otelcol-profiletometrics --config=examples/working-debug-config.yaml --feature-gates=+service.profilesSupport > collector.log 2>&1 &
        COLLECTOR_PID=$!
        echo $COLLECTOR_PID > collector.pid
        
        # Wait for collector to start
        sleep 10
        
        # Check if collector is running
        if ps -p $COLLECTOR_PID > /dev/null; then
          echo "Collector started successfully"
        else
          echo "Collector failed to start"
          echo "Collector logs:"
          cat collector.log
          exit 1
        fi

    - name: Send test data
      run: |
        # Send profile data
        curl -X POST http://localhost:4318/v1/profiles \
          -H "Content-Type: application/json" \
          -d '{
            "resourceProfiles": [{
              "resource": {
                "attributes": [{
                  "key": "service.name",
                  "value": {"stringValue": "test-service"}
                }]
              },
              "scopeProfiles": [{
                "scope": {"name": "test-scope"},
                "profiles": [{
                  "profileId": "12345678901234567890123456789012",
                  "name": "test-profile",
                  "startTimeUnixNano": "1640995200000000000",
                  "endTimeUnixNano": "1640995201000000000"
                }]
              }]
            }]
          }'
        
        # Send log data
        curl -X POST http://localhost:4318/v1/logs \
          -H "Content-Type: application/json" \
          -d '{
            "resourceLogs": [{
              "resource": {
                "attributes": [{
                  "key": "service.name",
                  "value": {"stringValue": "test-service"}
                }]
              },
              "scopeLogs": [{
                "scope": {"name": "test-scope"},
                "logRecords": [{
                  "timeUnixNano": "1640995200000000000",
                  "body": {"stringValue": "test log message"}
                }]
              }]
            }]
          }'
        
        # Send metrics data
        curl -X POST http://localhost:4318/v1/metrics \
          -H "Content-Type: application/json" \
          -d '{
            "resourceMetrics": [{
              "resource": {
                "attributes": [{
                  "key": "service.name",
                  "value": {"stringValue": "test-service"}
                }]
              },
              "scopeMetrics": [{
                "scope": {"name": "test-scope"},
                "metrics": [{
                  "name": "test_metric",
                  "description": "Test metric",
                  "unit": "1",
                  "gauge": {
                    "dataPoints": [{
                      "timeUnixNano": "1640995200000000000",
                      "asInt": "42"
                    }]
                  }
                }]
              }]
            }]
          }'

    - name: Check collector logs
      run: |
        # Check for debug logs
        if grep -q "ProfileToMetrics connector" collector.log; then
          echo "✓ Connector debug logs found"
        else
          echo "✗ Connector debug logs not found"
        fi
        
        # Check for error logs
        if grep -q "ERROR" collector.log; then
          echo "✗ Errors found in collector logs:"
          grep "ERROR" collector.log
          exit 1
        else
          echo "✓ No errors found in collector logs"
        fi

    - name: Stop collector
      if: always()
      run: |
        if [ -f collector.pid ]; then
          COLLECTOR_PID=$(cat collector.pid)
          if ps -p $COLLECTOR_PID > /dev/null; then
            kill $COLLECTOR_PID
            echo "Collector stopped"
          fi
          rm collector.pid
        fi

  # Test connector performance
  connector-performance:
    name: Connector Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'


    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run performance benchmarks
      run: |
        go test -bench=. -benchmem -benchtime=10s ./pkg/profiletometrics/...

    - name: Run memory profiling
      run: |
        go test -memprofile=mem.prof -cpuprofile=cpu.prof ./pkg/profiletometrics/...
        
        # Analyze memory profile
        go tool pprof -top mem.prof
        go tool pprof -top cpu.prof

  # Test connector with Docker
  connector-docker-tests:
    name: Connector Docker Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t otelcol-profiletometrics:test -f docker/Dockerfile .
        
        # Test the built binary
        echo "Testing the built binary..."
        docker run --rm otelcol-profiletometrics:test --help || {
          echo "Binary test failed"
          exit 1
        }

    - name: Test Docker image with debug config
      run: |
        # Start collector in Docker with proper error handling
        echo "Starting collector container..."
        docker run -d --name otelcol-test \
          -p 4317:4317 \
          -p 4318:4318 \
          -v $(pwd)/examples/working-debug-config.yaml:/etc/otelcol/config.yaml \
          otelcol-profiletometrics:test \
          --config=/etc/otelcol/config.yaml --feature-gates=+service.profilesSupport || {
          echo "Failed to start collector container"
          exit 1
        }
        
        # Wait for collector to start
        echo "Waiting for collector to start..."
        sleep 15
        
        # Check if container is running
        if ! docker ps | grep -q otelcol-test; then
          echo "Collector container is not running. Container logs:"
          docker logs otelcol-test
          echo "Container status:"
          docker ps -a | grep otelcol-test
          exit 1
        fi
        
        # Check collector logs for errors
        echo "Checking collector logs..."
        docker logs otelcol-test
        
        # Test configuration validation
        echo "Testing configuration validation..."
        docker exec otelcol-test /otelcol-profiletometrics --config=/etc/otelcol/config.yaml --feature-gates=+service.profilesSupport --dry-run || {
          echo "Configuration validation failed"
          docker logs otelcol-test
          exit 1
        }
        
        # Test OTLP profiles endpoint
        echo "Testing OTLP profiles endpoint..."
        curl -X POST http://localhost:4318/v1/profiles \
          -H "Content-Type: application/json" \
          -d '{
            "resourceProfiles": [{
              "resource": {
                "attributes": [{
                  "key": "service.name",
                  "value": {"stringValue": "test-service"}
                }]
              },
              "scopeProfiles": [{
                "scope": {"name": "test-scope"},
                "profiles": [{
                  "profileId": "12345678901234567890123456789012",
                  "name": "test-profile",
                  "startTimeUnixNano": "1640995200000000000",
                  "endTimeUnixNano": "1640995201000000000"
                }]
              }]
            }]
          }' || {
          echo "OTLP profiles endpoint test failed"
          docker logs otelcol-test
          exit 1
        }
        
        echo "All tests passed successfully!"
        
        # Cleanup
        docker stop otelcol-test
        docker rm otelcol-test
