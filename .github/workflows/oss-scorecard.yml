name: OSS Scorecard

on:
  schedule:
    # Run OSS Scorecard weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  security-events: write
  actions: read
  contents: read
  id-token: write

jobs:
  # OSS Scorecard analysis
  oss-scorecard:
    name: OSS Scorecard Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run OSS Scorecard
      uses: ossf/scorecard-action@v2.3.1
      with:
        results_file: results.sarif
        results_format: sarif
        publish_results: true
        repo_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload OSS Scorecard results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif

  # Security policy check
  security-policy:
    name: Security Policy Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ -f "SECURITY.md" ]; then
          echo "✓ SECURITY.md found"
        else
          echo "✗ SECURITY.md not found"
          echo "Creating SECURITY.md template..."
          echo "# Security Policy" > SECURITY.md
          echo "" >> SECURITY.md
          echo "## Supported Versions" >> SECURITY.md
          echo "" >> SECURITY.md
          echo "- 1.x.x: Supported" >> SECURITY.md
          echo "- < 1.0: Not supported" >> SECURITY.md
          echo "" >> SECURITY.md
          echo "## Reporting a Vulnerability" >> SECURITY.md
          echo "" >> SECURITY.md
          echo "Please report security vulnerabilities to security@example.com" >> SECURITY.md
          echo "" >> SECURITY.md
          echo "## Security Measures" >> SECURITY.md
          echo "" >> SECURITY.md
          echo "- All dependencies are regularly updated" >> SECURITY.md
          echo "- Security scanning is performed on every build" >> SECURITY.md
          echo "- OSS Scorecard is run weekly" >> SECURITY.md
        fi

    - name: Check for security headers
      run: |
        echo "Checking for security-related files..."
        
        # Check for .gitignore security patterns
        if grep -q "*.key" .gitignore; then
          echo "✓ .gitignore contains key files pattern"
        else
          echo "✗ .gitignore should exclude key files"
        fi
        
        # Check for secrets in code
        if grep -r "password\|secret\|key" --include="*.go" --include="*.yaml" --include="*.yml" . | grep -v "test\|example\|TODO\|FIXME"; then
          echo "✗ Potential secrets found in code"
        else
          echo "✓ No obvious secrets found in code"
        fi

  # License compliance
  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for license file
      run: |
        if [ -f "LICENSE" ] || [ -f "LICENSE.txt" ] || [ -f "LICENSE.md" ]; then
          echo "✓ License file found"
        else
          echo "✗ No license file found"
          echo "Creating LICENSE template..."
          echo "MIT License" > LICENSE
          echo "" >> LICENSE
          echo "Copyright (c) 2024 Henrik Rexed" >> LICENSE
          echo "" >> LICENSE
          echo "Permission is hereby granted, free of charge, to any person obtaining a copy" >> LICENSE
          echo "of this software and associated documentation files (the \"Software\"), to deal" >> LICENSE
          echo "in the Software without restriction, including without limitation the rights" >> LICENSE
          echo "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" >> LICENSE
          echo "copies of the Software, and to permit persons to whom the Software is" >> LICENSE
          echo "furnished to do so, subject to the following conditions:" >> LICENSE
          echo "" >> LICENSE
          echo "The above copyright notice and this permission notice shall be included in all" >> LICENSE
          echo "copies or substantial portions of the Software." >> LICENSE
          echo "" >> LICENSE
          echo "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR" >> LICENSE
          echo "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," >> LICENSE
          echo "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE" >> LICENSE
          echo "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER" >> LICENSE
          echo "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," >> LICENSE
          echo "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE" >> LICENSE
          echo "SOFTWARE." >> LICENSE
        fi

    - name: Check license compatibility
      run: |
        # Check if go.mod has proper license information
        if grep -q "license" go.mod; then
          echo "✓ License information found in go.mod"
        else
          echo "✗ No license information in go.mod"
        fi

  # Documentation quality
  documentation-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for README
      run: |
        if [ -f "README.md" ]; then
          echo "✓ README.md found"
        else
          echo "✗ README.md not found"
        fi

    - name: Check for contributing guidelines
      run: |
        if [ -f "CONTRIBUTING.md" ]; then
          echo "✓ CONTRIBUTING.md found"
        else
          echo "✗ CONTRIBUTING.md not found"
          echo "Creating CONTRIBUTING.md template..."
          echo "# Contributing" > CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "Thank you for your interest in contributing to this project!" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "## Getting Started" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "1. Fork the repository" >> CONTRIBUTING.md
          echo "2. Create a feature branch" >> CONTRIBUTING.md
          echo "3. Make your changes" >> CONTRIBUTING.md
          echo "4. Add tests" >> CONTRIBUTING.md
          echo "5. Submit a pull request" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "## Development" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "### Prerequisites" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "- Go 1.24+" >> CONTRIBUTING.md
          echo "- Docker" >> CONTRIBUTING.md
          echo "- Make" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "### Building" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "\`\`\`bash" >> CONTRIBUTING.md
          echo "make build" >> CONTRIBUTING.md
          echo "\`\`\`" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "### Testing" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "\`\`\`bash" >> CONTRIBUTING.md
          echo "make test" >> CONTRIBUTING.md
          echo "\`\`\`" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "## Code Style" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "- Follow Go conventions" >> CONTRIBUTING.md
          echo "- Add tests for new features" >> CONTRIBUTING.md
          echo "- Update documentation" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "## Pull Request Process" >> CONTRIBUTING.md
          echo "" >> CONTRIBUTING.md
          echo "1. Ensure all tests pass" >> CONTRIBUTING.md
          echo "2. Update documentation" >> CONTRIBUTING.md
          echo "3. Add changelog entry" >> CONTRIBUTING.md
          echo "4. Request review" >> CONTRIBUTING.md
        fi

    - name: Check for changelog
      run: |
        if [ -f "CHANGELOG.md" ]; then
          echo "✓ CHANGELOG.md found"
        else
          echo "✗ CHANGELOG.md not found"
          echo "Creating CHANGELOG.md template..."
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> CHANGELOG.md
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [Unreleased]" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Added" >> CHANGELOG.md
          echo "- Initial release" >> CHANGELOG.md
          echo "- Profile to Metrics connector" >> CHANGELOG.md
          echo "- Debug logging support" >> CHANGELOG.md
          echo "- Docker image with custom collector" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Changed" >> CHANGELOG.md
          echo "- N/A" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Deprecated" >> CHANGELOG.md
          echo "- N/A" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Removed" >> CHANGELOG.md
          echo "- N/A" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Fixed" >> CHANGELOG.md
          echo "- N/A" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Security" >> CHANGELOG.md
          echo "- N/A" >> CHANGELOG.md
        fi
